
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002570  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800269c  0800269c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800269c  0800269c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800269c  0800269c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080026a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000068  0800270c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800270c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c0e  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5f  00000000  00000000  00029c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca6  00000000  00000000  0002cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf9d  00000000  00000000  00043a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822d8  00000000  00000000  0004fa1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1cf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  000d1d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002664 	.word	0x08002664

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002664 	.word	0x08002664

0800014c <ledArray_init>:

static uint8_t ledArrayBuffer[NUMBER_OF_LEDS];
static uint8_t ledArrayPins[NUMBER_OF_LEDS] = {LR_PIN, LA_PIN, LG_PIN};
static uint8_t ledArrayEncoder[NUMBER_OF_VALUES] = {GPIO_PIN_SET, GPIO_PIN_RESET}; //idx 0 - SET, idx 1 - RESET

void ledArray_init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e010      	b.n	800017a <ledArray_init+0x2e>
		ledArrayBuffer[i] = 0x00;
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a0c      	ldr	r2, [pc, #48]	; (800018c <ledArray_init+0x40>)
 800015c:	2100      	movs	r1, #0
 800015e:	54d1      	strb	r1, [r2, r3]
		HAL_GPIO_WritePin(GPIO_PORT, ledArrayPins[i], ledArrayEncoder[0]);
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	4a0b      	ldr	r2, [pc, #44]	; (8000190 <ledArray_init+0x44>)
 8000164:	5cd3      	ldrb	r3, [r2, r3]
 8000166:	b29b      	uxth	r3, r3
 8000168:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <ledArray_init+0x48>)
 800016a:	7812      	ldrb	r2, [r2, #0]
 800016c:	4619      	mov	r1, r3
 800016e:	480a      	ldr	r0, [pc, #40]	; (8000198 <ledArray_init+0x4c>)
 8000170:	f001 fa4f 	bl	8001612 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++) {
 8000174:	79fb      	ldrb	r3, [r7, #7]
 8000176:	3301      	adds	r3, #1
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b02      	cmp	r3, #2
 800017e:	d9eb      	bls.n	8000158 <ledArray_init+0xc>
	}
}
 8000180:	bf00      	nop
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000084 	.word	0x20000084
 8000190:	20000000 	.word	0x20000000
 8000194:	20000004 	.word	0x20000004
 8000198:	40010800 	.word	0x40010800

0800019c <ledArrayBuffer_Write>:

uint8_t ledArrayBuffer_Write(uint8_t value) {
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]
	if (value >= NUMBER_OF_LEDS*2) {
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	2b05      	cmp	r3, #5
 80001aa:	d901      	bls.n	80001b0 <ledArrayBuffer_Write+0x14>
		return 0;
 80001ac:	2300      	movs	r3, #0
 80001ae:	e014      	b.n	80001da <ledArrayBuffer_Write+0x3e>
	}

	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++) {
 80001b0:	2300      	movs	r3, #0
 80001b2:	73fb      	strb	r3, [r7, #15]
 80001b4:	e00d      	b.n	80001d2 <ledArrayBuffer_Write+0x36>
		ledArrayBuffer[i] = (value >> i) & 0x01; //write the i bit from smallest to highest order to buffer
 80001b6:	79fa      	ldrb	r2, [r7, #7]
 80001b8:	7bfb      	ldrb	r3, [r7, #15]
 80001ba:	fa42 f303 	asr.w	r3, r2, r3
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	f002 0201 	and.w	r2, r2, #1
 80001c6:	b2d1      	uxtb	r1, r2
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <ledArrayBuffer_Write+0x48>)
 80001ca:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++) {
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	3301      	adds	r3, #1
 80001d0:	73fb      	strb	r3, [r7, #15]
 80001d2:	7bfb      	ldrb	r3, [r7, #15]
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	d9ee      	bls.n	80001b6 <ledArrayBuffer_Write+0x1a>
	}

	return 1;
 80001d8:	2301      	movs	r3, #1
}
 80001da:	4618      	mov	r0, r3
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	20000084 	.word	0x20000084

080001e8 <ledArrayDriver_Drive>:

void ledArrayDriver_Drive(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	71fb      	strb	r3, [r7, #7]
 80001f2:	e010      	b.n	8000216 <ledArrayDriver_Drive+0x2e>
		HAL_GPIO_WritePin(GPIO_PORT, ledArrayPins[i], ledArrayEncoder[ledArrayBuffer[i]]); //write pin
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <ledArrayDriver_Drive+0x40>)
 80001f8:	5cd3      	ldrb	r3, [r2, r3]
 80001fa:	b299      	uxth	r1, r3
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	4a0b      	ldr	r2, [pc, #44]	; (800022c <ledArrayDriver_Drive+0x44>)
 8000200:	5cd3      	ldrb	r3, [r2, r3]
 8000202:	461a      	mov	r2, r3
 8000204:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <ledArrayDriver_Drive+0x48>)
 8000206:	5c9b      	ldrb	r3, [r3, r2]
 8000208:	461a      	mov	r2, r3
 800020a:	480a      	ldr	r0, [pc, #40]	; (8000234 <ledArrayDriver_Drive+0x4c>)
 800020c:	f001 fa01 	bl	8001612 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < NUMBER_OF_LEDS; i++) {
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	3301      	adds	r3, #1
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2b02      	cmp	r3, #2
 800021a:	d9eb      	bls.n	80001f4 <ledArrayDriver_Drive+0xc>
	}
}
 800021c:	bf00      	nop
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000000 	.word	0x20000000
 800022c:	20000084 	.word	0x20000084
 8000230:	20000004 	.word	0x20000004
 8000234:	40010800 	.word	0x40010800

08000238 <displayLedArray>:

void displayLedArray(uint8_t value) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
	if(!ledArrayBuffer_Write(value)) {
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ffa9 	bl	800019c <ledArrayBuffer_Write>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d002      	beq.n	8000256 <displayLedArray+0x1e>
		return;
	}

	ledArrayDriver_Drive();
 8000250:	f7ff ffca 	bl	80001e8 <ledArrayDriver_Drive>
 8000254:	e000      	b.n	8000258 <displayLedArray+0x20>
		return;
 8000256:	bf00      	nop
}
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <toggleLedArray>:

void toggleLedArray(uint8_t idx) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (idx >= NUMBER_OF_LEDS) return;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b02      	cmp	r3, #2
 800026e:	d808      	bhi.n	8000282 <toggleLedArray+0x22>
	HAL_GPIO_TogglePin(GPIO_PORT, ledArrayPins[idx]);
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	4a06      	ldr	r2, [pc, #24]	; (800028c <toggleLedArray+0x2c>)
 8000274:	5cd3      	ldrb	r3, [r2, r3]
 8000276:	b29b      	uxth	r3, r3
 8000278:	4619      	mov	r1, r3
 800027a:	4805      	ldr	r0, [pc, #20]	; (8000290 <toggleLedArray+0x30>)
 800027c:	f001 f9e1 	bl	8001642 <HAL_GPIO_TogglePin>
 8000280:	e000      	b.n	8000284 <toggleLedArray+0x24>
	if (idx >= NUMBER_OF_LEDS) return;
 8000282:	bf00      	nop
}
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000000 	.word	0x20000000
 8000290:	40010800 	.word	0x40010800

08000294 <button_init>:
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

void button_init(void) {
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	for (char i = 0; i < NO_OF_BUTTONS; i++) {
 800029a:	2300      	movs	r3, #0
 800029c:	71fb      	strb	r3, [r7, #7]
 800029e:	e01b      	b.n	80002d8 <button_init+0x44>
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	4a12      	ldr	r2, [pc, #72]	; (80002ec <button_init+0x58>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	54d1      	strb	r1, [r2, r3]
		buttonBufferPrev[i] = BUTTON_IS_RELEASED;
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <button_init+0x5c>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <button_init+0x60>)
 80002b4:	2101      	movs	r1, #1
 80002b6:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <button_init+0x64>)
 80002bc:	2101      	movs	r1, #1
 80002be:	54d1      	strb	r1, [r2, r3]
		counterForButtonPress1s[i] = 0;
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <button_init+0x68>)
 80002c4:	2100      	movs	r1, #0
 80002c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		flagForButtonPress1s[i] = 0;
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <button_init+0x6c>)
 80002ce:	2100      	movs	r1, #0
 80002d0:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < NO_OF_BUTTONS; i++) {
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d9e0      	bls.n	80002a0 <button_init+0xc>
	}
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000088 	.word	0x20000088
 80002f0:	2000008c 	.word	0x2000008c
 80002f4:	20000090 	.word	0x20000090
 80002f8:	20000094 	.word	0x20000094
 80002fc:	2000009c 	.word	0x2000009c
 8000300:	20000098 	.word	0x20000098

08000304 <button_reading>:

void button_reading(void) {
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
	for (char i = 0; i < NO_OF_BUTTONS; i++) {
 800030a:	2300      	movs	r3, #0
 800030c:	71fb      	strb	r3, [r7, #7]
 800030e:	e055      	b.n	80003bc <button_reading+0xb8>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000310:	79fa      	ldrb	r2, [r7, #7]
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	492d      	ldr	r1, [pc, #180]	; (80003cc <button_reading+0xc8>)
 8000316:	5c89      	ldrb	r1, [r1, r2]
 8000318:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <button_reading+0xcc>)
 800031a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <button_reading+0xd0>)
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	492c      	ldr	r1, [pc, #176]	; (80003d8 <button_reading+0xd4>)
 8000328:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800032c:	79fc      	ldrb	r4, [r7, #7]
 800032e:	4619      	mov	r1, r3
 8000330:	4610      	mov	r0, r2
 8000332:	f001 f957 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	4b24      	ldr	r3, [pc, #144]	; (80003cc <button_reading+0xc8>)
 800033c:	551a      	strb	r2, [r3, r4]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	4a22      	ldr	r2, [pc, #136]	; (80003cc <button_reading+0xc8>)
 8000342:	5cd2      	ldrb	r2, [r2, r3]
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	4922      	ldr	r1, [pc, #136]	; (80003d0 <button_reading+0xcc>)
 8000348:	5ccb      	ldrb	r3, [r1, r3]
 800034a:	429a      	cmp	r2, r3
 800034c:	d133      	bne.n	80003b6 <button_reading+0xb2>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	4922      	ldr	r1, [pc, #136]	; (80003dc <button_reading+0xd8>)
 8000354:	5c89      	ldrb	r1, [r1, r2]
 8000356:	4a22      	ldr	r2, [pc, #136]	; (80003e0 <button_reading+0xdc>)
 8000358:	54d1      	strb	r1, [r2, r3]
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800035a:	79fa      	ldrb	r2, [r7, #7]
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	491b      	ldr	r1, [pc, #108]	; (80003cc <button_reading+0xc8>)
 8000360:	5c89      	ldrb	r1, [r1, r2]
 8000362:	4a1e      	ldr	r2, [pc, #120]	; (80003dc <button_reading+0xd8>)
 8000364:	54d1      	strb	r1, [r2, r3]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <button_reading+0xd8>)
 800036a:	5cd3      	ldrb	r3, [r2, r3]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d119      	bne.n	80003a4 <button_reading+0xa0>
				//toggle pin to validate
				HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
 8000370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000374:	481b      	ldr	r0, [pc, #108]	; (80003e4 <button_reading+0xe0>)
 8000376:	f001 f964 	bl	8001642 <HAL_GPIO_TogglePin>
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	4a1a      	ldr	r2, [pc, #104]	; (80003e8 <button_reading+0xe4>)
 800037e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000382:	2b63      	cmp	r3, #99	; 0x63
 8000384:	d809      	bhi.n	800039a <button_reading+0x96>
					counterForButtonPress1s[i]++;
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a17      	ldr	r2, [pc, #92]	; (80003e8 <button_reading+0xe4>)
 800038a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800038e:	3201      	adds	r2, #1
 8000390:	b291      	uxth	r1, r2
 8000392:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <button_reading+0xe4>)
 8000394:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000398:	e00d      	b.n	80003b6 <button_reading+0xb2>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <button_reading+0xe8>)
 800039e:	2101      	movs	r1, #1
 80003a0:	54d1      	strb	r1, [r2, r3]
 80003a2:	e008      	b.n	80003b6 <button_reading+0xb2>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <button_reading+0xe4>)
 80003a8:	2100      	movs	r1, #0
 80003aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <button_reading+0xe8>)
 80003b2:	2100      	movs	r1, #0
 80003b4:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < NO_OF_BUTTONS; i++) {
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	3301      	adds	r3, #1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d9a6      	bls.n	8000310 <button_reading+0xc>
			}
		}
	}
}
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd90      	pop	{r4, r7, pc}
 80003cc:	20000090 	.word	0x20000090
 80003d0:	20000094 	.word	0x20000094
 80003d4:	20000008 	.word	0x20000008
 80003d8:	20000014 	.word	0x20000014
 80003dc:	20000088 	.word	0x20000088
 80003e0:	2000008c 	.word	0x2000008c
 80003e4:	40010800 	.word	0x40010800
 80003e8:	2000009c 	.word	0x2000009c
 80003ec:	20000098 	.word	0x20000098

080003f0 <is_button_pressed>:

//checking a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d901      	bls.n	8000404 <is_button_pressed+0x14>
 8000400:	2300      	movs	r3, #0
 8000402:	e00d      	b.n	8000420 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_RELEASED)
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4a09      	ldr	r2, [pc, #36]	; (800042c <is_button_pressed+0x3c>)
 8000408:	5cd3      	ldrb	r3, [r2, r3]
			&& (buttonBufferPrev[index] == BUTTON_IS_PRESSED);
 800040a:	2b01      	cmp	r3, #1
 800040c:	d106      	bne.n	800041c <is_button_pressed+0x2c>
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	4a07      	ldr	r2, [pc, #28]	; (8000430 <is_button_pressed+0x40>)
 8000412:	5cd3      	ldrb	r3, [r2, r3]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d101      	bne.n	800041c <is_button_pressed+0x2c>
 8000418:	2301      	movs	r3, #1
 800041a:	e000      	b.n	800041e <is_button_pressed+0x2e>
 800041c:	2300      	movs	r3, #0
 800041e:	b2db      	uxtb	r3, r3
}
 8000420:	4618      	mov	r0, r3
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000088 	.word	0x20000088
 8000430:	2000008c 	.word	0x2000008c

08000434 <led7SegBuffer_Write>:

//ex3
static int index_led = 0;
static int led_buffer[NUMBER_OF_LEDS_7SEG] = {0, 0, 0, 0};

uint8_t led7SegBuffer_Write(uint8_t ledPos, uint8_t value) {
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	460a      	mov	r2, r1
 800043e:	71fb      	strb	r3, [r7, #7]
 8000440:	4613      	mov	r3, r2
 8000442:	71bb      	strb	r3, [r7, #6]
	if (ledPos >= NUMBER_OF_LEDS_7SEG) {
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d901      	bls.n	800044e <led7SegBuffer_Write+0x1a>
		return 0;
 800044a:	2300      	movs	r3, #0
 800044c:	e009      	b.n	8000462 <led7SegBuffer_Write+0x2e>
	}

	if (value >= NUMBER_OF_VALUES_7SEG) {
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	2b0f      	cmp	r3, #15
 8000452:	d901      	bls.n	8000458 <led7SegBuffer_Write+0x24>
		return 0;
 8000454:	2300      	movs	r3, #0
 8000456:	e004      	b.n	8000462 <led7SegBuffer_Write+0x2e>
	}

	led7SegBuffer[ledPos] = value;
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	4904      	ldr	r1, [pc, #16]	; (800046c <led7SegBuffer_Write+0x38>)
 800045c:	79ba      	ldrb	r2, [r7, #6]
 800045e:	54ca      	strb	r2, [r1, r3]

	return 1;
 8000460:	2301      	movs	r3, #1
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	200000a4 	.word	0x200000a4

08000470 <led7SegDriver_Drive>:

void led7SegDriver_Drive(uint8_t ledPos) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	uint8_t segValue = led7SegValueConversion[led7SegBuffer[ledPos]];
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	4a18      	ldr	r2, [pc, #96]	; (80004e0 <led7SegDriver_Drive+0x70>)
 800047e:	5cd3      	ldrb	r3, [r2, r3]
 8000480:	461a      	mov	r2, r3
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <led7SegDriver_Drive+0x74>)
 8000484:	5c9b      	ldrb	r3, [r3, r2]
 8000486:	73bb      	strb	r3, [r7, #14]
	for (uint8_t segPos = 0; segPos < NUMBER_OF_SEGS; segPos++) {
 8000488:	2300      	movs	r3, #0
 800048a:	73fb      	strb	r3, [r7, #15]
 800048c:	e01f      	b.n	80004ce <led7SegDriver_Drive+0x5e>
		if (segValue & (0x01 << segPos)) {
 800048e:	7bba      	ldrb	r2, [r7, #14]
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	fa42 f303 	asr.w	r3, r2, r3
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	2b00      	cmp	r3, #0
 800049c:	d00a      	beq.n	80004b4 <led7SegDriver_Drive+0x44>
			HAL_GPIO_WritePin(GPIO_PORT_7SEG, led7SegArrayPins[segPos], led7SegPinState[1]);
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	4a11      	ldr	r2, [pc, #68]	; (80004e8 <led7SegDriver_Drive+0x78>)
 80004a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a6:	4a11      	ldr	r2, [pc, #68]	; (80004ec <led7SegDriver_Drive+0x7c>)
 80004a8:	7852      	ldrb	r2, [r2, #1]
 80004aa:	4619      	mov	r1, r3
 80004ac:	4810      	ldr	r0, [pc, #64]	; (80004f0 <led7SegDriver_Drive+0x80>)
 80004ae:	f001 f8b0 	bl	8001612 <HAL_GPIO_WritePin>
 80004b2:	e009      	b.n	80004c8 <led7SegDriver_Drive+0x58>
		}

		else {
			HAL_GPIO_WritePin(GPIO_PORT_7SEG, led7SegArrayPins[segPos], led7SegPinState[0]);
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <led7SegDriver_Drive+0x78>)
 80004b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004bc:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <led7SegDriver_Drive+0x7c>)
 80004be:	7812      	ldrb	r2, [r2, #0]
 80004c0:	4619      	mov	r1, r3
 80004c2:	480b      	ldr	r0, [pc, #44]	; (80004f0 <led7SegDriver_Drive+0x80>)
 80004c4:	f001 f8a5 	bl	8001612 <HAL_GPIO_WritePin>
	for (uint8_t segPos = 0; segPos < NUMBER_OF_SEGS; segPos++) {
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	3301      	adds	r3, #1
 80004cc:	73fb      	strb	r3, [r7, #15]
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	2b06      	cmp	r3, #6
 80004d2:	d9dc      	bls.n	800048e <led7SegDriver_Drive+0x1e>
		}
	}
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200000a4 	.word	0x200000a4
 80004e4:	20000030 	.word	0x20000030
 80004e8:	2000001c 	.word	0x2000001c
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	40010800 	.word	0x40010800

080004f4 <display7SEG>:

void display7SEG(uint8_t ledPos, int num) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
	if(!led7SegBuffer_Write(ledPos, (uint8_t)num)) {
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	b2da      	uxtb	r2, r3
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4611      	mov	r1, r2
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff93 	bl	8000434 <led7SegBuffer_Write>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d004      	beq.n	800051e <display7SEG+0x2a>
		return;
	}

	led7SegDriver_Drive(ledPos);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ffaa 	bl	8000470 <led7SegDriver_Drive>
 800051c:	e000      	b.n	8000520 <display7SEG+0x2c>
		return;
 800051e:	bf00      	nop
}
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <selectEn>:

void selectEn(uint16_t selPin) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	//off all
	HAL_GPIO_WritePin(EN_PORT, EN0_PIN | EN1_PIN | EN2_PIN | EN3_PIN, enPinState[0]);
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <selectEn+0x30>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	461a      	mov	r2, r3
 8000538:	21f0      	movs	r1, #240	; 0xf0
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <selectEn+0x34>)
 800053c:	f001 f869 	bl	8001612 <HAL_GPIO_WritePin>
	//write pin according to sel
	HAL_GPIO_WritePin(EN_PORT, selPin, enPinState[1]);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <selectEn+0x30>)
 8000542:	785a      	ldrb	r2, [r3, #1]
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	4619      	mov	r1, r3
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <selectEn+0x34>)
 800054a:	f001 f862 	bl	8001612 <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000040 	.word	0x20000040
 800055c:	40010800 	.word	0x40010800

08000560 <update7SEG>:
	default:
		break;
	}
}

void update7SEG(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	if (index_led < 0 || index_led > 3) {
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <update7SEG+0x8c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	db3d      	blt.n	80005e8 <update7SEG+0x88>
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <update7SEG+0x8c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b03      	cmp	r3, #3
 8000572:	dc39      	bgt.n	80005e8 <update7SEG+0x88>
		return;
	}

	switch (index_led) {
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <update7SEG+0x8c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b03      	cmp	r3, #3
 800057a:	d81b      	bhi.n	80005b4 <update7SEG+0x54>
 800057c:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <update7SEG+0x24>)
 800057e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000582:	bf00      	nop
 8000584:	08000595 	.word	0x08000595
 8000588:	0800059d 	.word	0x0800059d
 800058c:	080005a5 	.word	0x080005a5
 8000590:	080005ad 	.word	0x080005ad
	case 0:
		selectEn(EN0_PIN);
 8000594:	2010      	movs	r0, #16
 8000596:	f7ff ffc7 	bl	8000528 <selectEn>
		break;
 800059a:	e00c      	b.n	80005b6 <update7SEG+0x56>

	case 1:
		selectEn(EN1_PIN);
 800059c:	2020      	movs	r0, #32
 800059e:	f7ff ffc3 	bl	8000528 <selectEn>
		break;
 80005a2:	e008      	b.n	80005b6 <update7SEG+0x56>

	case 2:
		selectEn(EN2_PIN);
 80005a4:	2040      	movs	r0, #64	; 0x40
 80005a6:	f7ff ffbf 	bl	8000528 <selectEn>
		break;
 80005aa:	e004      	b.n	80005b6 <update7SEG+0x56>

	case 3:
		selectEn(EN3_PIN);
 80005ac:	2080      	movs	r0, #128	; 0x80
 80005ae:	f7ff ffbb 	bl	8000528 <selectEn>
		break;
 80005b2:	e000      	b.n	80005b6 <update7SEG+0x56>

	default:
		break;
 80005b4:	bf00      	nop
	}

	display7SEG(index_led, led_buffer[index_led]);
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <update7SEG+0x8c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <update7SEG+0x8c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	490b      	ldr	r1, [pc, #44]	; (80005f0 <update7SEG+0x90>)
 80005c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4610      	mov	r0, r2
 80005ca:	f7ff ff93 	bl	80004f4 <display7SEG>

	index_led++;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <update7SEG+0x8c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	4a05      	ldr	r2, [pc, #20]	; (80005ec <update7SEG+0x8c>)
 80005d6:	6013      	str	r3, [r2, #0]

	if (index_led == 4) {
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <update7SEG+0x8c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b04      	cmp	r3, #4
 80005de:	d104      	bne.n	80005ea <update7SEG+0x8a>
		index_led = 0;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <update7SEG+0x8c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	e000      	b.n	80005ea <update7SEG+0x8a>
		return;
 80005e8:	bf00      	nop
	}
}
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000a8 	.word	0x200000a8
 80005f0:	200000ac 	.word	0x200000ac

080005f4 <updateLedBuffer>:

uint8_t updateLedBuffer(int mode, int count) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	if (mode > 3 || mode < 0 || count > 99 || count < 0) {
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b03      	cmp	r3, #3
 8000602:	dc08      	bgt.n	8000616 <updateLedBuffer+0x22>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db05      	blt.n	8000616 <updateLedBuffer+0x22>
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b63      	cmp	r3, #99	; 0x63
 800060e:	dc02      	bgt.n	8000616 <updateLedBuffer+0x22>
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	da01      	bge.n	800061a <updateLedBuffer+0x26>
		return 0;
 8000616:	2300      	movs	r3, #0
 8000618:	e02e      	b.n	8000678 <updateLedBuffer+0x84>
	}

	led_buffer[0] = mode / 10;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a19      	ldr	r2, [pc, #100]	; (8000684 <updateLedBuffer+0x90>)
 800061e:	fb82 1203 	smull	r1, r2, r2, r3
 8000622:	1092      	asrs	r2, r2, #2
 8000624:	17db      	asrs	r3, r3, #31
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <updateLedBuffer+0x94>)
 800062a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = mode % 10;
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <updateLedBuffer+0x90>)
 8000630:	fb83 2301 	smull	r2, r3, r3, r1
 8000634:	109a      	asrs	r2, r3, #2
 8000636:	17cb      	asrs	r3, r1, #31
 8000638:	1ad2      	subs	r2, r2, r3
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	1aca      	subs	r2, r1, r3
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <updateLedBuffer+0x94>)
 8000646:	605a      	str	r2, [r3, #4]
	led_buffer[2] = count / 10;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <updateLedBuffer+0x90>)
 800064c:	fb82 1203 	smull	r1, r2, r2, r3
 8000650:	1092      	asrs	r2, r2, #2
 8000652:	17db      	asrs	r3, r3, #31
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <updateLedBuffer+0x94>)
 8000658:	6093      	str	r3, [r2, #8]
	led_buffer[3] = count % 10;
 800065a:	6839      	ldr	r1, [r7, #0]
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <updateLedBuffer+0x90>)
 800065e:	fb83 2301 	smull	r2, r3, r3, r1
 8000662:	109a      	asrs	r2, r3, #2
 8000664:	17cb      	asrs	r3, r1, #31
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	4613      	mov	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	1aca      	subs	r2, r1, r3
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <updateLedBuffer+0x94>)
 8000674:	60da      	str	r2, [r3, #12]

	return 1;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	66666667 	.word	0x66666667
 8000688:	200000ac 	.word	0x200000ac

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fcbe 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f820 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f8a4 	bl	80007e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800069c:	f000 f856 	bl	800074c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <main+0x48>)
 80006a2:	f001 fc1f 	bl	8001ee4 <HAL_TIM_Base_Start_IT>

  software_timer_init();
 80006a6:	f000 f8fd 	bl	80008a4 <software_timer_init>
  button_init();
 80006aa:	f7ff fdf3 	bl	8000294 <button_init>
  ledArray_init();
 80006ae:	f7ff fd4d 	bl	800014c <ledArray_init>

  setTimer(0, 10);
 80006b2:	210a      	movs	r1, #10
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 f92d 	bl	8000914 <setTimer>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //run FSM inside timer for synchronization
	  if (get_timer_flag_value(0)) {
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 f912 	bl	80008e4 <get_timer_flag_value>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f9      	beq.n	80006ba <main+0x2e>
		  traffic_light_processing_fsm();
 80006c6:	f000 fa4f 	bl	8000b68 <traffic_light_processing_fsm>
		  setTimer(0, 10);
 80006ca:	210a      	movs	r1, #10
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f921 	bl	8000914 <setTimer>
	  if (get_timer_flag_value(0)) {
 80006d2:	e7f2      	b.n	80006ba <main+0x2e>
 80006d4:	200000e4 	.word	0x200000e4

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b090      	sub	sp, #64	; 0x40
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	2228      	movs	r2, #40	; 0x28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 ffb4 	bl	8002654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fa:	2301      	movs	r3, #1
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	4618      	mov	r0, r3
 800070e:	f000 ffb1 	bl	8001674 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000718:	f000 f8be 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fa1d 	bl	8001b74 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000740:	f000 f8aa 	bl	8000898 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3740      	adds	r7, #64	; 0x40
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_TIM2_Init+0x94>)
 800076a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800076e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000 - 1;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_TIM2_Init+0x94>)
 8000772:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_TIM2_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10 - 1;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_TIM2_Init+0x94>)
 8000780:	2209      	movs	r2, #9
 8000782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_TIM2_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_TIM2_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <MX_TIM2_Init+0x94>)
 8000792:	f001 fb57 	bl	8001e44 <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800079c:	f000 f87c 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4619      	mov	r1, r3
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_TIM2_Init+0x94>)
 80007ae:	f001 fced 	bl	800218c <HAL_TIM_ConfigClockSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 f86e 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_TIM2_Init+0x94>)
 80007ca:	f001 feb5 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007d4:	f000 f860 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000e4 	.word	0x200000e4

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_GPIO_Init+0xa8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a23      	ldr	r2, [pc, #140]	; (800088c <MX_GPIO_Init+0xa8>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_GPIO_Init+0xa8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0320 	and.w	r3, r3, #32
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_GPIO_Init+0xa8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a1d      	ldr	r2, [pc, #116]	; (800088c <MX_GPIO_Init+0xa8>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_GPIO_Init+0xa8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_GPIO_Init+0xa8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_GPIO_Init+0xa8>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0xa8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0308 	and.w	r3, r3, #8
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000840:	2200      	movs	r2, #0
 8000842:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_GPIO_Init+0xac>)
 8000848:	f000 fee3 	bl	8001612 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800084c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000850:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2302      	movs	r3, #2
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4619      	mov	r1, r3
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <MX_GPIO_Init+0xac>)
 8000866:	f000 fd43 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800086a:	2307      	movs	r3, #7
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0xb0>)
 800087e:	f000 fd37 	bl	80012f0 <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800
 8000894:	40010c00 	.word	0x40010c00

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <software_timer_init>:
#include "main.h"

static int timer_counter[NO_OF_TIMERS];
static int timer_flag[NO_OF_TIMERS];

void software_timer_init(void) {
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	for (char i = 0; i < NO_OF_TIMERS; i++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	e00c      	b.n	80008ca <software_timer_init+0x26>
		timer_counter[i] = 0;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <software_timer_init+0x38>)
 80008b4:	2100      	movs	r1, #0
 80008b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timer_flag[i] = 0;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <software_timer_init+0x3c>)
 80008be:	2100      	movs	r1, #0
 80008c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (char i = 0; i < NO_OF_TIMERS; i++) {
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	3301      	adds	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d9ef      	bls.n	80008b0 <software_timer_init+0xc>
	}
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	200000bc 	.word	0x200000bc
 80008e0:	200000cc 	.word	0x200000cc

080008e4 <get_timer_flag_value>:

int get_timer_flag_value(int idx) {
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	if (idx < 0 || idx > NO_OF_TIMERS) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db02      	blt.n	80008f8 <get_timer_flag_value+0x14>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	dd02      	ble.n	80008fe <get_timer_flag_value+0x1a>
		return -1;
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	e003      	b.n	8000906 <get_timer_flag_value+0x22>
	}

	return timer_flag[idx];
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <get_timer_flag_value+0x2c>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	200000cc 	.word	0x200000cc

08000914 <setTimer>:

void setTimer(int idx, int duration) {
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	if (idx < 0 || idx > NO_OF_TIMERS || duration < 0) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db16      	blt.n	8000952 <setTimer+0x3e>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b04      	cmp	r3, #4
 8000928:	dc13      	bgt.n	8000952 <setTimer+0x3e>
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db10      	blt.n	8000952 <setTimer+0x3e>
		return;
	}

	timer_counter[idx] = duration / TIMER_CYCLE;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <setTimer+0x48>)
 8000934:	fb82 1203 	smull	r1, r2, r2, r3
 8000938:	1092      	asrs	r2, r2, #2
 800093a:	17db      	asrs	r3, r3, #31
 800093c:	1ad2      	subs	r2, r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <setTimer+0x4c>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[idx] = 0;
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <setTimer+0x50>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2100      	movs	r1, #0
 800094c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000950:	e000      	b.n	8000954 <setTimer+0x40>
		return;
 8000952:	bf00      	nop
}
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	66666667 	.word	0x66666667
 8000960:	200000bc 	.word	0x200000bc
 8000964:	200000cc 	.word	0x200000cc

08000968 <timer_run>:

void timer_run(int idx) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	if (idx < 0 || idx > NO_OF_TIMERS) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db1d      	blt.n	80009b2 <timer_run+0x4a>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b04      	cmp	r3, #4
 800097a:	dc1a      	bgt.n	80009b2 <timer_run+0x4a>
		return;
	}

	if (timer_counter[idx] > 0) {
 800097c:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <timer_run+0x54>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	2b00      	cmp	r3, #0
 8000986:	dd15      	ble.n	80009b4 <timer_run+0x4c>
		timer_counter[idx]--;
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <timer_run+0x54>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	490a      	ldr	r1, [pc, #40]	; (80009bc <timer_run+0x54>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (timer_counter[idx] == 0) {
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <timer_run+0x54>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d106      	bne.n	80009b4 <timer_run+0x4c>
			timer_flag[idx] = 1;
 80009a6:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <timer_run+0x58>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2101      	movs	r1, #1
 80009ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009b0:	e000      	b.n	80009b4 <timer_run+0x4c>
		return;
 80009b2:	bf00      	nop
		}
	}
}
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	200000bc 	.word	0x200000bc
 80009c0:	200000cc 	.word	0x200000cc

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <HAL_MspInit+0x5c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_MspInit+0x5c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_MspInit+0x5c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x5c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_MspInit+0x60>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_MspInit+0x60>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010000 	.word	0x40010000

08000a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a38:	d113      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	201c      	movs	r0, #28
 8000a58:	f000 fc13 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a5c:	201c      	movs	r0, #28
 8000a5e:	f000 fc2c 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 faf1 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TIM2_IRQHandler+0x10>)
 8000ac6:	f001 fa59 	bl	8001f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000e4 	.word	0x200000e4

08000ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <HAL_TIM_PeriodElapsedCallback>:

#include "main.h"
#include "input_reading.h"
#include "software_timer.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af0:	d10e      	bne.n	8000b10 <HAL_TIM_PeriodElapsedCallback+0x30>
		for (char i = 0; i < NO_OF_TIMERS; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	e006      	b.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0x26>
			timer_run(i);
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff34 	bl	8000968 <timer_run>
		for (char i = 0; i < NO_OF_TIMERS; i++) {
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	3301      	adds	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d9f5      	bls.n	8000af8 <HAL_TIM_PeriodElapsedCallback+0x18>
		}
		button_reading();
 8000b0c:	f7ff fbfa 	bl	8000304 <button_reading>
	}
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <traffic_light_init>:

static unsigned int blinkDuration = 250;

static enum ModeState modeState = NORMAL_MODE;

void traffic_light_init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	button_init();
 8000b1c:	f7ff fbba 	bl	8000294 <button_init>
	ledArray_init();
 8000b20:	f7ff fb14 	bl	800014c <ledArray_init>
	displayLedArray(lightSelector[0]); //display red
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <traffic_light_init+0x40>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fb85 	bl	8000238 <displayLedArray>
	setTimer(1, lightDuration[0]);
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <traffic_light_init+0x44>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4619      	mov	r1, r3
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff feed 	bl	8000914 <setTimer>
	setTimer(2, countDownDuration);
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <traffic_light_init+0x48>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2002      	movs	r0, #2
 8000b42:	f7ff fee7 	bl	8000914 <setTimer>
	setTimer(3, blinkDuration);
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <traffic_light_init+0x4c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f7ff fee1 	bl	8000914 <setTimer>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000054 	.word	0x20000054
 8000b5c:	20000048 	.word	0x20000048
 8000b60:	20000058 	.word	0x20000058
 8000b64:	2000005c 	.word	0x2000005c

08000b68 <traffic_light_processing_fsm>:

void traffic_light_processing_fsm(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	switch (modeState) {
 8000b6c:	4bb4      	ldr	r3, [pc, #720]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b09      	cmp	r3, #9
 8000b72:	f200 821a 	bhi.w	8000faa <traffic_light_processing_fsm+0x442>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <traffic_light_processing_fsm+0x14>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000ba5 	.word	0x08000ba5
 8000b80:	08000bdd 	.word	0x08000bdd
 8000b84:	08000c73 	.word	0x08000c73
 8000b88:	08000d09 	.word	0x08000d09
 8000b8c:	08000d9f 	.word	0x08000d9f
 8000b90:	08000e1b 	.word	0x08000e1b
 8000b94:	08000e61 	.word	0x08000e61
 8000b98:	08000edb 	.word	0x08000edb
 8000b9c:	08000eff 	.word	0x08000eff
 8000ba0:	08000f71 	.word	0x08000f71
	case NORMAL_MODE:
		//actions
		traffic_light_init();
 8000ba4:	f7ff ffb8 	bl	8000b18 <traffic_light_init>
		downCounter = lightDuration[0] / 1000;
 8000ba8:	4ba6      	ldr	r3, [pc, #664]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4aa6      	ldr	r2, [pc, #664]	; (8000e48 <traffic_light_processing_fsm+0x2e0>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	099b      	lsrs	r3, r3, #6
 8000bb4:	4aa5      	ldr	r2, [pc, #660]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000bb6:	6013      	str	r3, [r2, #0]

		//transition
		if (is_button_pressed(1)) {
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff fc19 	bl	80003f0 <is_button_pressed>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <traffic_light_processing_fsm+0x6c>
			button_init();
 8000bc4:	f7ff fb66 	bl	8000294 <button_init>
			ledArray_init();
 8000bc8:	f7ff fac0 	bl	800014c <ledArray_init>
			modeState = RED_LED_DURATION_MODIFICATION;
 8000bcc:	4b9c      	ldr	r3, [pc, #624]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	701a      	strb	r2, [r3, #0]
		}

		else {
			modeState = RED_LED_RUN;
		}
		break;
 8000bd2:	e1ea      	b.n	8000faa <traffic_light_processing_fsm+0x442>
			modeState = RED_LED_RUN;
 8000bd4:	4b9a      	ldr	r3, [pc, #616]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
		break;
 8000bda:	e1e6      	b.n	8000faa <traffic_light_processing_fsm+0x442>

	case RED_LED_RUN:
		//actions
		displayLedArray(lightSelector[0]); //select RED led
 8000bdc:	4b9c      	ldr	r3, [pc, #624]	; (8000e50 <traffic_light_processing_fsm+0x2e8>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fb29 	bl	8000238 <displayLedArray>
		//display 7seg leds
		updateLedBuffer(0, downCounter);
 8000be6:	4b99      	ldr	r3, [pc, #612]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4619      	mov	r1, r3
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd01 	bl	80005f4 <updateLedBuffer>
		if (get_timer_flag_value(2)) {
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	f7ff fe76 	bl	80008e4 <get_timer_flag_value>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d010      	beq.n	8000c20 <traffic_light_processing_fsm+0xb8>
			updateLedBuffer(0, --downCounter);
 8000bfe:	4b93      	ldr	r3, [pc, #588]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	4a91      	ldr	r2, [pc, #580]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b90      	ldr	r3, [pc, #576]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff fcf0 	bl	80005f4 <updateLedBuffer>
			setTimer(2, countDownDuration);
 8000c14:	4b8f      	ldr	r3, [pc, #572]	; (8000e54 <traffic_light_processing_fsm+0x2ec>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff fe7a 	bl	8000914 <setTimer>
		}
		update7SEG();
 8000c20:	f7ff fc9e 	bl	8000560 <update7SEG>

		//transitions
		if (is_button_pressed(0)) {
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fbe3 	bl	80003f0 <is_button_pressed>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d007      	beq.n	8000c40 <traffic_light_processing_fsm+0xd8>
			button_init();
 8000c30:	f7ff fb30 	bl	8000294 <button_init>
			ledArray_init();
 8000c34:	f7ff fa8a 	bl	800014c <ledArray_init>
			modeState = RED_LED_DURATION_MODIFICATION;
 8000c38:	4b81      	ldr	r3, [pc, #516]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	701a      	strb	r2, [r3, #0]
				downCounter = lightDuration[1] / 1000;
				setTimer(1, lightDuration[1]);
				modeState = AMBER_LED_RUN;
			}
		}
		break;
 8000c3e:	e1a9      	b.n	8000f94 <traffic_light_processing_fsm+0x42c>
			if (get_timer_flag_value(1) == 1) {
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff fe4f 	bl	80008e4 <get_timer_flag_value>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	f040 81a3 	bne.w	8000f94 <traffic_light_processing_fsm+0x42c>
				downCounter = lightDuration[1] / 1000;
 8000c4e:	4b7d      	ldr	r3, [pc, #500]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a7d      	ldr	r2, [pc, #500]	; (8000e48 <traffic_light_processing_fsm+0x2e0>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	099b      	lsrs	r3, r3, #6
 8000c5a:	4a7c      	ldr	r2, [pc, #496]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000c5c:	6013      	str	r3, [r2, #0]
				setTimer(1, lightDuration[1]);
 8000c5e:	4b79      	ldr	r3, [pc, #484]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4619      	mov	r1, r3
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff fe55 	bl	8000914 <setTimer>
				modeState = AMBER_LED_RUN;
 8000c6a:	4b75      	ldr	r3, [pc, #468]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	701a      	strb	r2, [r3, #0]
		break;
 8000c70:	e190      	b.n	8000f94 <traffic_light_processing_fsm+0x42c>

	case AMBER_LED_RUN:
		//actions
		displayLedArray(lightSelector[1]); //select AMBER led
 8000c72:	4b77      	ldr	r3, [pc, #476]	; (8000e50 <traffic_light_processing_fsm+0x2e8>)
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fade 	bl	8000238 <displayLedArray>
		//display 7seg leds
		updateLedBuffer(0, downCounter);
 8000c7c:	4b73      	ldr	r3, [pc, #460]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fcb6 	bl	80005f4 <updateLedBuffer>
		if (get_timer_flag_value(2)) {
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f7ff fe2b 	bl	80008e4 <get_timer_flag_value>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d010      	beq.n	8000cb6 <traffic_light_processing_fsm+0x14e>
			updateLedBuffer(0, --downCounter);
 8000c94:	4b6d      	ldr	r3, [pc, #436]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	4a6c      	ldr	r2, [pc, #432]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4b6b      	ldr	r3, [pc, #428]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fca5 	bl	80005f4 <updateLedBuffer>
			setTimer(2, countDownDuration);
 8000caa:	4b6a      	ldr	r3, [pc, #424]	; (8000e54 <traffic_light_processing_fsm+0x2ec>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f7ff fe2f 	bl	8000914 <setTimer>
		}
		update7SEG();
 8000cb6:	f7ff fc53 	bl	8000560 <update7SEG>

		//transitions
		if (is_button_pressed(0)) {
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fb98 	bl	80003f0 <is_button_pressed>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <traffic_light_processing_fsm+0x16e>
			button_init();
 8000cc6:	f7ff fae5 	bl	8000294 <button_init>
			ledArray_init();
 8000cca:	f7ff fa3f 	bl	800014c <ledArray_init>
			modeState = RED_LED_DURATION_MODIFICATION;
 8000cce:	4b5c      	ldr	r3, [pc, #368]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	701a      	strb	r2, [r3, #0]
				downCounter = lightDuration[2] / 1000;
				setTimer(1, lightDuration[2]);
				modeState = GREEN_LED_RUN;
			}
		}
		break;
 8000cd4:	e160      	b.n	8000f98 <traffic_light_processing_fsm+0x430>
			if (get_timer_flag_value(1) == 1) {
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f7ff fe04 	bl	80008e4 <get_timer_flag_value>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	f040 815a 	bne.w	8000f98 <traffic_light_processing_fsm+0x430>
				downCounter = lightDuration[2] / 1000;
 8000ce4:	4b57      	ldr	r3, [pc, #348]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	4a57      	ldr	r2, [pc, #348]	; (8000e48 <traffic_light_processing_fsm+0x2e0>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	099b      	lsrs	r3, r3, #6
 8000cf0:	4a56      	ldr	r2, [pc, #344]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000cf2:	6013      	str	r3, [r2, #0]
				setTimer(1, lightDuration[2]);
 8000cf4:	4b53      	ldr	r3, [pc, #332]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f7ff fe0a 	bl	8000914 <setTimer>
				modeState = GREEN_LED_RUN;
 8000d00:	4b4f      	ldr	r3, [pc, #316]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	701a      	strb	r2, [r3, #0]
		break;
 8000d06:	e147      	b.n	8000f98 <traffic_light_processing_fsm+0x430>

	case GREEN_LED_RUN:
		//actions
		displayLedArray(lightSelector[2]); //select GREEN led
 8000d08:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <traffic_light_processing_fsm+0x2e8>)
 8000d0a:	789b      	ldrb	r3, [r3, #2]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fa93 	bl	8000238 <displayLedArray>
		//display 7seg leds
		updateLedBuffer(0, downCounter);
 8000d12:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4619      	mov	r1, r3
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fc6b 	bl	80005f4 <updateLedBuffer>
		if (get_timer_flag_value(2)) {
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f7ff fde0 	bl	80008e4 <get_timer_flag_value>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d010      	beq.n	8000d4c <traffic_light_processing_fsm+0x1e4>
			updateLedBuffer(0, --downCounter);
 8000d2a:	4b48      	ldr	r3, [pc, #288]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	4a46      	ldr	r2, [pc, #280]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b45      	ldr	r3, [pc, #276]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fc5a 	bl	80005f4 <updateLedBuffer>
			setTimer(2, countDownDuration);
 8000d40:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <traffic_light_processing_fsm+0x2ec>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fde4 	bl	8000914 <setTimer>
		}
		update7SEG();
 8000d4c:	f7ff fc08 	bl	8000560 <update7SEG>

		//transitions
		if (is_button_pressed(0)) {
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fb4d 	bl	80003f0 <is_button_pressed>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d007      	beq.n	8000d6c <traffic_light_processing_fsm+0x204>
			button_init();
 8000d5c:	f7ff fa9a 	bl	8000294 <button_init>
			ledArray_init();
 8000d60:	f7ff f9f4 	bl	800014c <ledArray_init>
			modeState = RED_LED_DURATION_MODIFICATION;
 8000d64:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	701a      	strb	r2, [r3, #0]
				downCounter = lightDuration[0] / 1000;
				setTimer(1, lightDuration[0]);
				modeState = RED_LED_RUN;
			}
		}
		break;
 8000d6a:	e117      	b.n	8000f9c <traffic_light_processing_fsm+0x434>
			if (get_timer_flag_value(1) == 1) {
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff fdb9 	bl	80008e4 <get_timer_flag_value>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	f040 8111 	bne.w	8000f9c <traffic_light_processing_fsm+0x434>
				downCounter = lightDuration[0] / 1000;
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <traffic_light_processing_fsm+0x2e0>)
 8000d80:	fba2 2303 	umull	r2, r3, r2, r3
 8000d84:	099b      	lsrs	r3, r3, #6
 8000d86:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <traffic_light_processing_fsm+0x2e4>)
 8000d88:	6013      	str	r3, [r2, #0]
				setTimer(1, lightDuration[0]);
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fdbf 	bl	8000914 <setTimer>
				modeState = RED_LED_RUN;
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
		break;
 8000d9c:	e0fe      	b.n	8000f9c <traffic_light_processing_fsm+0x434>

	case RED_LED_DURATION_MODIFICATION:
		//actions
		if (get_timer_flag_value(3)) {
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f7ff fda0 	bl	80008e4 <get_timer_flag_value>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d008      	beq.n	8000dbc <traffic_light_processing_fsm+0x254>
			toggleLedArray(0);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff fa58 	bl	8000260 <toggleLedArray>
			setTimer(3, blinkDuration);
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <traffic_light_processing_fsm+0x2f0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	2003      	movs	r0, #3
 8000db8:	f7ff fdac 	bl	8000914 <setTimer>
		}

		updateLedBuffer(1, lightDuration[0] / 1000);
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <traffic_light_processing_fsm+0x2e0>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	099b      	lsrs	r3, r3, #6
 8000dc8:	4619      	mov	r1, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff fc12 	bl	80005f4 <updateLedBuffer>
		update7SEG();
 8000dd0:	f7ff fbc6 	bl	8000560 <update7SEG>

		//transitions
		if (is_button_pressed(0)) {
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fb0b 	bl	80003f0 <is_button_pressed>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d007      	beq.n	8000df0 <traffic_light_processing_fsm+0x288>
			button_init();
 8000de0:	f7ff fa58 	bl	8000294 <button_init>
			ledArray_init();
 8000de4:	f7ff f9b2 	bl	800014c <ledArray_init>
			modeState = AMBER_LED_DURATION_MODIFICATION;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000dea:	2206      	movs	r2, #6
 8000dec:	701a      	strb	r2, [r3, #0]
		}

		else if (is_button_pressed(2)) {
			modeState = NORMAL_MODE;
		}
		break;
 8000dee:	e0d7      	b.n	8000fa0 <traffic_light_processing_fsm+0x438>
		else if (is_button_pressed(1)) {
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff fafd 	bl	80003f0 <is_button_pressed>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <traffic_light_processing_fsm+0x29c>
			modeState = RED_LED_INCREASE_DURATION;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000dfe:	2205      	movs	r2, #5
 8000e00:	701a      	strb	r2, [r3, #0]
		break;
 8000e02:	e0cd      	b.n	8000fa0 <traffic_light_processing_fsm+0x438>
		else if (is_button_pressed(2)) {
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff faf3 	bl	80003f0 <is_button_pressed>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 80c7 	beq.w	8000fa0 <traffic_light_processing_fsm+0x438>
			modeState = NORMAL_MODE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
		break;
 8000e18:	e0c2      	b.n	8000fa0 <traffic_light_processing_fsm+0x438>

	case RED_LED_INCREASE_DURATION:
		//actions
		lightDuration[0] += 1000;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000e24:	6013      	str	r3, [r2, #0]
		if (lightDuration[0] == 100 * 1000) {
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <traffic_light_processing_fsm+0x2f4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d102      	bne.n	8000e36 <traffic_light_processing_fsm+0x2ce>
			lightDuration[0] = 0;
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <traffic_light_processing_fsm+0x2dc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
		}

		//transitions
		modeState = RED_LED_DURATION_MODIFICATION;
 8000e36:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <traffic_light_processing_fsm+0x2d8>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	701a      	strb	r2, [r3, #0]
		break;
 8000e3c:	e0b5      	b.n	8000faa <traffic_light_processing_fsm+0x442>
 8000e3e:	bf00      	nop
 8000e40:	200000e0 	.word	0x200000e0
 8000e44:	20000048 	.word	0x20000048
 8000e48:	10624dd3 	.word	0x10624dd3
 8000e4c:	200000dc 	.word	0x200000dc
 8000e50:	20000054 	.word	0x20000054
 8000e54:	20000058 	.word	0x20000058
 8000e58:	2000005c 	.word	0x2000005c
 8000e5c:	000186a0 	.word	0x000186a0

	case AMBER_LED_DURATION_MODIFICATION:
		//actions
		if (get_timer_flag_value(3)) {
 8000e60:	2003      	movs	r0, #3
 8000e62:	f7ff fd3f 	bl	80008e4 <get_timer_flag_value>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d008      	beq.n	8000e7e <traffic_light_processing_fsm+0x316>
			toggleLedArray(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f7ff f9f7 	bl	8000260 <toggleLedArray>
			setTimer(3, blinkDuration);
 8000e72:	4b4f      	ldr	r3, [pc, #316]	; (8000fb0 <traffic_light_processing_fsm+0x448>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4619      	mov	r1, r3
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f7ff fd4b 	bl	8000914 <setTimer>
		}

		updateLedBuffer(2, lightDuration[1] / 1000);
 8000e7e:	4b4d      	ldr	r3, [pc, #308]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4a4d      	ldr	r2, [pc, #308]	; (8000fb8 <traffic_light_processing_fsm+0x450>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	099b      	lsrs	r3, r3, #6
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff fbb1 	bl	80005f4 <updateLedBuffer>
		update7SEG();
 8000e92:	f7ff fb65 	bl	8000560 <update7SEG>

		//transitions
		if (is_button_pressed(0)) {
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff faaa 	bl	80003f0 <is_button_pressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <traffic_light_processing_fsm+0x34a>
			button_init();
 8000ea2:	f7ff f9f7 	bl	8000294 <button_init>
			ledArray_init();
 8000ea6:	f7ff f951 	bl	800014c <ledArray_init>
			modeState = GREEN_LED_DURATION_MODIFICATION;
 8000eaa:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <traffic_light_processing_fsm+0x454>)
 8000eac:	2208      	movs	r2, #8
 8000eae:	701a      	strb	r2, [r3, #0]
		}

		else if (is_button_pressed(2)) {
			modeState = NORMAL_MODE;
		}
		break;
 8000eb0:	e078      	b.n	8000fa4 <traffic_light_processing_fsm+0x43c>
		else if (is_button_pressed(1)) {
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff fa9c 	bl	80003f0 <is_button_pressed>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <traffic_light_processing_fsm+0x35e>
			modeState = AMBER_LED_INCREASE_DURATION;
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <traffic_light_processing_fsm+0x454>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	701a      	strb	r2, [r3, #0]
		break;
 8000ec4:	e06e      	b.n	8000fa4 <traffic_light_processing_fsm+0x43c>
		else if (is_button_pressed(2)) {
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f7ff fa92 	bl	80003f0 <is_button_pressed>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d068      	beq.n	8000fa4 <traffic_light_processing_fsm+0x43c>
			modeState = NORMAL_MODE;
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <traffic_light_processing_fsm+0x454>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
		break;
 8000ed8:	e064      	b.n	8000fa4 <traffic_light_processing_fsm+0x43c>

	case AMBER_LED_INCREASE_DURATION:
		//actions
		lightDuration[1] += 1000;
 8000eda:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ee2:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000ee4:	6053      	str	r3, [r2, #4]
		if (lightDuration[1] == 100 * 1000) {
 8000ee6:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4a35      	ldr	r2, [pc, #212]	; (8000fc0 <traffic_light_processing_fsm+0x458>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d102      	bne.n	8000ef6 <traffic_light_processing_fsm+0x38e>
			lightDuration[1] = 0;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
		}

		//transitions
		modeState = AMBER_LED_DURATION_MODIFICATION;
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <traffic_light_processing_fsm+0x454>)
 8000ef8:	2206      	movs	r2, #6
 8000efa:	701a      	strb	r2, [r3, #0]
		break;
 8000efc:	e055      	b.n	8000faa <traffic_light_processing_fsm+0x442>

	case GREEN_LED_DURATION_MODIFICATION:
		//actions
		if (get_timer_flag_value(3)) {
 8000efe:	2003      	movs	r0, #3
 8000f00:	f7ff fcf0 	bl	80008e4 <get_timer_flag_value>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d008      	beq.n	8000f1c <traffic_light_processing_fsm+0x3b4>
			toggleLedArray(2);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f7ff f9a8 	bl	8000260 <toggleLedArray>
			setTimer(3, blinkDuration);
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <traffic_light_processing_fsm+0x448>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	2003      	movs	r0, #3
 8000f18:	f7ff fcfc 	bl	8000914 <setTimer>
		}

		updateLedBuffer(3, lightDuration[2] / 1000);
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a25      	ldr	r2, [pc, #148]	; (8000fb8 <traffic_light_processing_fsm+0x450>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	099b      	lsrs	r3, r3, #6
 8000f28:	4619      	mov	r1, r3
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f7ff fb62 	bl	80005f4 <updateLedBuffer>
		update7SEG();
 8000f30:	f7ff fb16 	bl	8000560 <update7SEG>

		//transitions
		if (is_button_pressed(0)) {
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fa5b 	bl	80003f0 <is_button_pressed>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <traffic_light_processing_fsm+0x3e0>
			modeState = NORMAL_MODE;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <traffic_light_processing_fsm+0x454>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
		}

		else if (is_button_pressed(2)) {
			modeState = NORMAL_MODE;
		}
		break;
 8000f46:	e02f      	b.n	8000fa8 <traffic_light_processing_fsm+0x440>
		else if (is_button_pressed(1)) {
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fa51 	bl	80003f0 <is_button_pressed>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <traffic_light_processing_fsm+0x3f4>
			modeState = GREEN_LED_INCREASE_DURATION;
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <traffic_light_processing_fsm+0x454>)
 8000f56:	2209      	movs	r2, #9
 8000f58:	701a      	strb	r2, [r3, #0]
		break;
 8000f5a:	e025      	b.n	8000fa8 <traffic_light_processing_fsm+0x440>
		else if (is_button_pressed(2)) {
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f7ff fa47 	bl	80003f0 <is_button_pressed>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d01f      	beq.n	8000fa8 <traffic_light_processing_fsm+0x440>
			modeState = NORMAL_MODE;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <traffic_light_processing_fsm+0x454>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
		break;
 8000f6e:	e01b      	b.n	8000fa8 <traffic_light_processing_fsm+0x440>

	case GREEN_LED_INCREASE_DURATION:
		//actions
		lightDuration[2] += 1000;
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000f7a:	6093      	str	r3, [r2, #8]
		if (lightDuration[2] == 100 * 1000) {
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <traffic_light_processing_fsm+0x458>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d102      	bne.n	8000f8c <traffic_light_processing_fsm+0x424>
			lightDuration[2] = 0;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <traffic_light_processing_fsm+0x44c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
		}

		//transitions
		modeState = GREEN_LED_DURATION_MODIFICATION;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <traffic_light_processing_fsm+0x454>)
 8000f8e:	2208      	movs	r2, #8
 8000f90:	701a      	strb	r2, [r3, #0]
		break;
 8000f92:	e00a      	b.n	8000faa <traffic_light_processing_fsm+0x442>
		break;
 8000f94:	bf00      	nop
 8000f96:	e008      	b.n	8000faa <traffic_light_processing_fsm+0x442>
		break;
 8000f98:	bf00      	nop
 8000f9a:	e006      	b.n	8000faa <traffic_light_processing_fsm+0x442>
		break;
 8000f9c:	bf00      	nop
 8000f9e:	e004      	b.n	8000faa <traffic_light_processing_fsm+0x442>
		break;
 8000fa0:	bf00      	nop
 8000fa2:	e002      	b.n	8000faa <traffic_light_processing_fsm+0x442>
		break;
 8000fa4:	bf00      	nop
 8000fa6:	e000      	b.n	8000faa <traffic_light_processing_fsm+0x442>
		break;
 8000fa8:	bf00      	nop
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000005c 	.word	0x2000005c
 8000fb4:	20000048 	.word	0x20000048
 8000fb8:	10624dd3 	.word	0x10624dd3
 8000fbc:	200000e0 	.word	0x200000e0
 8000fc0:	000186a0 	.word	0x000186a0

08000fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fea:	f7ff fd73 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f001 fb0d 	bl	800260c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ff2:	f7ff fb4b 	bl	800068c <main>
  bx lr
 8000ff6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001000:	080026a4 	.word	0x080026a4
  ldr r2, =_sbss
 8001004:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001008:	20000130 	.word	0x20000130

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_Init+0x28>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_Init+0x28>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f923 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	200f      	movs	r0, #15
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fcca 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40022000 	.word	0x40022000

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f93b 	bl	80012d6 <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 f903 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000044 	.word	0x20000044
 8001094:	20000064 	.word	0x20000064
 8001098:	20000060 	.word	0x20000060

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_IncTick+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x20>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000064 	.word	0x20000064
 80010bc:	2000012c 	.word	0x2000012c

080010c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <HAL_GetTick+0x10>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	2000012c 	.word	0x2000012c

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4906      	ldr	r1, [pc, #24]	; (800116c <__NVIC_EnableIRQ+0x34>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff90 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff2d 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff42 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff90 	bl	80011c4 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5f 	bl	8001170 <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff35 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b08b      	sub	sp, #44	; 0x2c
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e148      	b.n	8001596 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001304:	2201      	movs	r2, #1
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 8137 	bne.w	8001590 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4aa3      	ldr	r2, [pc, #652]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d05e      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 800132c:	4aa1      	ldr	r2, [pc, #644]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d875      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 8001332:	4aa1      	ldr	r2, [pc, #644]	; (80015b8 <HAL_GPIO_Init+0x2c8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d058      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 8001338:	4a9f      	ldr	r2, [pc, #636]	; (80015b8 <HAL_GPIO_Init+0x2c8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d86f      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 800133e:	4a9f      	ldr	r2, [pc, #636]	; (80015bc <HAL_GPIO_Init+0x2cc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d052      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 8001344:	4a9d      	ldr	r2, [pc, #628]	; (80015bc <HAL_GPIO_Init+0x2cc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d869      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 800134a:	4a9d      	ldr	r2, [pc, #628]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d04c      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 8001350:	4a9b      	ldr	r2, [pc, #620]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d863      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 8001356:	4a9b      	ldr	r2, [pc, #620]	; (80015c4 <HAL_GPIO_Init+0x2d4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d046      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 800135c:	4a99      	ldr	r2, [pc, #612]	; (80015c4 <HAL_GPIO_Init+0x2d4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d85d      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 8001362:	2b12      	cmp	r3, #18
 8001364:	d82a      	bhi.n	80013bc <HAL_GPIO_Init+0xcc>
 8001366:	2b12      	cmp	r3, #18
 8001368:	d859      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 800136a:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <HAL_GPIO_Init+0x80>)
 800136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001370:	080013eb 	.word	0x080013eb
 8001374:	080013c5 	.word	0x080013c5
 8001378:	080013d7 	.word	0x080013d7
 800137c:	08001419 	.word	0x08001419
 8001380:	0800141f 	.word	0x0800141f
 8001384:	0800141f 	.word	0x0800141f
 8001388:	0800141f 	.word	0x0800141f
 800138c:	0800141f 	.word	0x0800141f
 8001390:	0800141f 	.word	0x0800141f
 8001394:	0800141f 	.word	0x0800141f
 8001398:	0800141f 	.word	0x0800141f
 800139c:	0800141f 	.word	0x0800141f
 80013a0:	0800141f 	.word	0x0800141f
 80013a4:	0800141f 	.word	0x0800141f
 80013a8:	0800141f 	.word	0x0800141f
 80013ac:	0800141f 	.word	0x0800141f
 80013b0:	0800141f 	.word	0x0800141f
 80013b4:	080013cd 	.word	0x080013cd
 80013b8:	080013e1 	.word	0x080013e1
 80013bc:	4a82      	ldr	r2, [pc, #520]	; (80015c8 <HAL_GPIO_Init+0x2d8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013c2:	e02c      	b.n	800141e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	623b      	str	r3, [r7, #32]
          break;
 80013ca:	e029      	b.n	8001420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	3304      	adds	r3, #4
 80013d2:	623b      	str	r3, [r7, #32]
          break;
 80013d4:	e024      	b.n	8001420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	3308      	adds	r3, #8
 80013dc:	623b      	str	r3, [r7, #32]
          break;
 80013de:	e01f      	b.n	8001420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	330c      	adds	r3, #12
 80013e6:	623b      	str	r3, [r7, #32]
          break;
 80013e8:	e01a      	b.n	8001420 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013f2:	2304      	movs	r3, #4
 80013f4:	623b      	str	r3, [r7, #32]
          break;
 80013f6:	e013      	b.n	8001420 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d105      	bne.n	800140c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001400:	2308      	movs	r3, #8
 8001402:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	611a      	str	r2, [r3, #16]
          break;
 800140a:	e009      	b.n	8001420 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800140c:	2308      	movs	r3, #8
 800140e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	615a      	str	r2, [r3, #20]
          break;
 8001416:	e003      	b.n	8001420 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x130>
          break;
 800141e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2bff      	cmp	r3, #255	; 0xff
 8001424:	d801      	bhi.n	800142a <HAL_GPIO_Init+0x13a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	e001      	b.n	800142e <HAL_GPIO_Init+0x13e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3304      	adds	r3, #4
 800142e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2bff      	cmp	r3, #255	; 0xff
 8001434:	d802      	bhi.n	800143c <HAL_GPIO_Init+0x14c>
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	e002      	b.n	8001442 <HAL_GPIO_Init+0x152>
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	3b08      	subs	r3, #8
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	210f      	movs	r1, #15
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	401a      	ands	r2, r3
 8001454:	6a39      	ldr	r1, [r7, #32]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	431a      	orrs	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8090 	beq.w	8001590 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001470:	4b56      	ldr	r3, [pc, #344]	; (80015cc <HAL_GPIO_Init+0x2dc>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a55      	ldr	r2, [pc, #340]	; (80015cc <HAL_GPIO_Init+0x2dc>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_GPIO_Init+0x2dc>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001488:	4a51      	ldr	r2, [pc, #324]	; (80015d0 <HAL_GPIO_Init+0x2e0>)
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001494:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a49      	ldr	r2, [pc, #292]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d00d      	beq.n	80014d0 <HAL_GPIO_Init+0x1e0>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a48      	ldr	r2, [pc, #288]	; (80015d8 <HAL_GPIO_Init+0x2e8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d007      	beq.n	80014cc <HAL_GPIO_Init+0x1dc>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a47      	ldr	r2, [pc, #284]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d101      	bne.n	80014c8 <HAL_GPIO_Init+0x1d8>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e004      	b.n	80014d2 <HAL_GPIO_Init+0x1e2>
 80014c8:	2303      	movs	r3, #3
 80014ca:	e002      	b.n	80014d2 <HAL_GPIO_Init+0x1e2>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_GPIO_Init+0x1e2>
 80014d0:	2300      	movs	r3, #0
 80014d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d4:	f002 0203 	and.w	r2, r2, #3
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	4093      	lsls	r3, r2
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014e2:	493b      	ldr	r1, [pc, #236]	; (80015d0 <HAL_GPIO_Init+0x2e0>)
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014fc:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4937      	ldr	r1, [pc, #220]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800150a:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	43db      	mvns	r3, r3
 8001512:	4933      	ldr	r1, [pc, #204]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 8001514:	4013      	ands	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	492d      	ldr	r1, [pc, #180]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	43db      	mvns	r3, r3
 800153a:	4929      	ldr	r1, [pc, #164]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 800153c:	4013      	ands	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	4923      	ldr	r1, [pc, #140]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	608b      	str	r3, [r1, #8]
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	43db      	mvns	r3, r3
 8001562:	491f      	ldr	r1, [pc, #124]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 8001564:	4013      	ands	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	4919      	ldr	r1, [pc, #100]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	60cb      	str	r3, [r1, #12]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	4915      	ldr	r1, [pc, #84]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 800158c:	4013      	ands	r3, r2
 800158e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	3301      	adds	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f47f aeaf 	bne.w	8001304 <HAL_GPIO_Init+0x14>
  }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	372c      	adds	r7, #44	; 0x2c
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	10320000 	.word	0x10320000
 80015b8:	10310000 	.word	0x10310000
 80015bc:	10220000 	.word	0x10220000
 80015c0:	10210000 	.word	0x10210000
 80015c4:	10120000 	.word	0x10120000
 80015c8:	10110000 	.word	0x10110000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010000 	.word	0x40010000
 80015d4:	40010800 	.word	0x40010800
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	40011000 	.word	0x40011000
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001622:	787b      	ldrb	r3, [r7, #1]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800162e:	e003      	b.n	8001638 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	611a      	str	r2, [r3, #16]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	041a      	lsls	r2, r3, #16
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43d9      	mvns	r1, r3
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	400b      	ands	r3, r1
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	611a      	str	r2, [r3, #16]
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e26c      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8087 	beq.w	80017a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001694:	4b92      	ldr	r3, [pc, #584]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b04      	cmp	r3, #4
 800169e:	d00c      	beq.n	80016ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a0:	4b8f      	ldr	r3, [pc, #572]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d112      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
 80016ac:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4b89      	ldr	r3, [pc, #548]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d06c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x12c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d168      	bne.n	80017a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e246      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x76>
 80016dc:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a7f      	ldr	r2, [pc, #508]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x98>
 80016f2:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7a      	ldr	r2, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b78      	ldr	r3, [pc, #480]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a77      	ldr	r2, [pc, #476]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0xbc>
 8001716:	4b72      	ldr	r3, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a71      	ldr	r2, [pc, #452]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6f      	ldr	r3, [pc, #444]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6a      	ldr	r2, [pc, #424]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a67      	ldr	r2, [pc, #412]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fcb6 	bl	80010c0 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fcb2 	bl	80010c0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1fa      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xe4>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fca2 	bl	80010c0 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fc9e 	bl	80010c0 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1e6      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x10c>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
 80017c6:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1ba      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4939      	ldr	r1, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fc57 	bl	80010c0 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fc53 	bl	80010c0 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e19b      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4927      	ldr	r1, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fc36 	bl	80010c0 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fc32 	bl	80010c0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e17a      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d03a      	beq.n	80018f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d019      	beq.n	80018be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff fc16 	bl	80010c0 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fc12 	bl	80010c0 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e15a      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 faa6 	bl	8001e08 <RCC_Delay>
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fbfc 	bl	80010c0 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ca:	e00f      	b.n	80018ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fbf8 	bl	80010c0 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d908      	bls.n	80018ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e140      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	42420000 	.word	0x42420000
 80018e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b9e      	ldr	r3, [pc, #632]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e9      	bne.n	80018cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a6 	beq.w	8001a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b97      	ldr	r3, [pc, #604]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10d      	bne.n	8001932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b94      	ldr	r3, [pc, #592]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a93      	ldr	r2, [pc, #588]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b91      	ldr	r3, [pc, #580]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001932:	4b8e      	ldr	r3, [pc, #568]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193e:	4b8b      	ldr	r3, [pc, #556]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a8a      	ldr	r2, [pc, #552]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194a:	f7ff fbb9 	bl	80010c0 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001952:	f7ff fbb5 	bl	80010c0 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0fd      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	4b81      	ldr	r3, [pc, #516]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x312>
 8001978:	4b7b      	ldr	r3, [pc, #492]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a7a      	ldr	r2, [pc, #488]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6213      	str	r3, [r2, #32]
 8001984:	e02d      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x334>
 800198e:	4b76      	ldr	r3, [pc, #472]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a75      	ldr	r2, [pc, #468]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a72      	ldr	r2, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	e01c      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x356>
 80019b0:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a6c      	ldr	r2, [pc, #432]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a69      	ldr	r2, [pc, #420]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a66      	ldr	r2, [pc, #408]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a63      	ldr	r2, [pc, #396]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d015      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fb69 	bl	80010c0 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff fb65 	bl	80010c0 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0ab      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ee      	beq.n	80019f2 <HAL_RCC_OscConfig+0x37e>
 8001a14:	e014      	b.n	8001a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fb53 	bl	80010c0 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fb4f 	bl	80010c0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e095      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a47      	ldr	r2, [pc, #284]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8081 	beq.w	8001b5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d061      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d146      	bne.n	8001afe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_OscConfig+0x4fc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fb23 	bl	80010c0 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fb1f 	bl	80010c0 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e067      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	492d      	ldr	r1, [pc, #180]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a19      	ldr	r1, [r3, #32]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	4927      	ldr	r1, [pc, #156]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x4fc>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff faf3 	bl	80010c0 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff faef 	bl	80010c0 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e037      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x46a>
 8001afc:	e02f      	b.n	8001b5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_RCC_OscConfig+0x4fc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fadc 	bl	80010c0 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff fad8 	bl	80010c0 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e020      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x498>
 8001b2a:	e018      	b.n	8001b5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e013      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	42420060 	.word	0x42420060

08001b74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0d0      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d910      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	4965      	ldr	r1, [pc, #404]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0b8      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd0:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	494d      	ldr	r1, [pc, #308]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d040      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e07f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e073      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e06b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4936      	ldr	r1, [pc, #216]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff fa2c 	bl	80010c0 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff fa28 	bl	80010c0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e053      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d210      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e032      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4916      	ldr	r1, [pc, #88]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d02:	f000 f821 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	490a      	ldr	r1, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x1cc>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f98a 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	0800268c 	.word	0x0800268c
 8001d40:	20000044 	.word	0x20000044
 8001d44:	20000060 	.word	0x20000060

08001d48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	b490      	push	{r4, r7}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d50:	1d3c      	adds	r4, r7, #4
 8001d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d58:	f240 2301 	movw	r3, #513	; 0x201
 8001d5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x40>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x46>
 8001d86:	e02d      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8a:	623b      	str	r3, [r7, #32]
      break;
 8001d8c:	e02d      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	0c9b      	lsrs	r3, r3, #18
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001da0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c5b      	lsrs	r3, r3, #17
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dba:	4413      	add	r3, r2
 8001dbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc6:	fb02 f203 	mul.w	r2, r2, r3
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	e004      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	623b      	str	r3, [r7, #32]
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de6:	623b      	str	r3, [r7, #32]
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc90      	pop	{r4, r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	0800267c 	.word	0x0800267c
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	003d0900 	.word	0x003d0900

08001e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <RCC_Delay+0x34>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <RCC_Delay+0x38>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0a5b      	lsrs	r3, r3, #9
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e24:	bf00      	nop
  }
  while (Delay --);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	60fa      	str	r2, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f9      	bne.n	8001e24 <RCC_Delay+0x1c>
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	20000044 	.word	0x20000044
 8001e40:	10624dd3 	.word	0x10624dd3

08001e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e041      	b.n	8001eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fddc 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f000 fa6a 	bl	800235c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d001      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e035      	b.n	8001f68 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <HAL_TIM_Base_Start_IT+0x90>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_TIM_Base_Start_IT+0x4e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f26:	d004      	beq.n	8001f32 <HAL_TIM_Base_Start_IT+0x4e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <HAL_TIM_Base_Start_IT+0x94>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d111      	bne.n	8001f56 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b06      	cmp	r3, #6
 8001f42:	d010      	beq.n	8001f66 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f54:	e007      	b.n	8001f66 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40012c00 	.word	0x40012c00
 8001f78:	40000400 	.word	0x40000400

08001f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0202 	mvn.w	r2, #2
 8001fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f9b1 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f9a4 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f9b3 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0204 	mvn.w	r2, #4
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f987 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f97a 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f989 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d122      	bne.n	8002080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b08      	cmp	r3, #8
 8002046:	d11b      	bne.n	8002080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0208 	mvn.w	r2, #8
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2204      	movs	r2, #4
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f95d 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f950 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f95f 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b10      	cmp	r3, #16
 800208c:	d122      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b10      	cmp	r3, #16
 800209a:	d11b      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0210 	mvn.w	r2, #16
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2208      	movs	r2, #8
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f933 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f926 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f935 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0201 	mvn.w	r2, #1
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fcf0 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b80      	cmp	r3, #128	; 0x80
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa67 	bl	80025fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d107      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8f9 	bl	800234a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b20      	cmp	r3, #32
 8002164:	d10e      	bne.n	8002184 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b20      	cmp	r3, #32
 8002172:	d107      	bne.n	8002184 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0220 	mvn.w	r2, #32
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fa32 	bl	80025e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_ConfigClockSource+0x18>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0b3      	b.n	800230c <HAL_TIM_ConfigClockSource+0x180>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021dc:	d03e      	beq.n	800225c <HAL_TIM_ConfigClockSource+0xd0>
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e2:	f200 8087 	bhi.w	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	f000 8085 	beq.w	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f2:	d87f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 80021f4:	2b70      	cmp	r3, #112	; 0x70
 80021f6:	d01a      	beq.n	800222e <HAL_TIM_ConfigClockSource+0xa2>
 80021f8:	2b70      	cmp	r3, #112	; 0x70
 80021fa:	d87b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 80021fc:	2b60      	cmp	r3, #96	; 0x60
 80021fe:	d050      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x116>
 8002200:	2b60      	cmp	r3, #96	; 0x60
 8002202:	d877      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 8002204:	2b50      	cmp	r3, #80	; 0x50
 8002206:	d03c      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0xf6>
 8002208:	2b50      	cmp	r3, #80	; 0x50
 800220a:	d873      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d058      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x136>
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d86f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 8002214:	2b30      	cmp	r3, #48	; 0x30
 8002216:	d064      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d86b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d060      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d867      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05c      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d05a      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800222c:	e062      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f000 f95c 	bl	80024fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002250:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	609a      	str	r2, [r3, #8]
      break;
 800225a:	e04e      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f000 f945 	bl	80024fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800227e:	609a      	str	r2, [r3, #8]
      break;
 8002280:	e03b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	461a      	mov	r2, r3
 8002290:	f000 f8bc 	bl	800240c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2150      	movs	r1, #80	; 0x50
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f913 	bl	80024c6 <TIM_ITRx_SetConfig>
      break;
 80022a0:	e02b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 f8da 	bl	8002468 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2160      	movs	r1, #96	; 0x60
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f903 	bl	80024c6 <TIM_ITRx_SetConfig>
      break;
 80022c0:	e01b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 f89c 	bl	800240c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2140      	movs	r1, #64	; 0x40
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f8f3 	bl	80024c6 <TIM_ITRx_SetConfig>
      break;
 80022e0:	e00b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f000 f8ea 	bl	80024c6 <TIM_ITRx_SetConfig>
        break;
 80022f2:	e002      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022f4:	bf00      	nop
 80022f6:	e000      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a25      	ldr	r2, [pc, #148]	; (8002404 <TIM_Base_SetConfig+0xa8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <TIM_Base_SetConfig+0x28>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237a:	d003      	beq.n	8002384 <TIM_Base_SetConfig+0x28>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a22      	ldr	r2, [pc, #136]	; (8002408 <TIM_Base_SetConfig+0xac>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d108      	bne.n	8002396 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <TIM_Base_SetConfig+0xa8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <TIM_Base_SetConfig+0x52>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d003      	beq.n	80023ae <TIM_Base_SetConfig+0x52>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a17      	ldr	r2, [pc, #92]	; (8002408 <TIM_Base_SetConfig+0xac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d108      	bne.n	80023c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a07      	ldr	r2, [pc, #28]	; (8002404 <TIM_Base_SetConfig+0xa8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d103      	bne.n	80023f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	615a      	str	r2, [r3, #20]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	40012c00 	.word	0x40012c00
 8002408:	40000400 	.word	0x40000400

0800240c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f023 0201 	bic.w	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f023 030a 	bic.w	r3, r3, #10
 8002448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	621a      	str	r2, [r3, #32]
}
 800245e:	bf00      	nop
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f023 0210 	bic.w	r2, r3, #16
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002492:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	031b      	lsls	r3, r3, #12
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	621a      	str	r2, [r3, #32]
}
 80024bc:	bf00      	nop
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f043 0307 	orr.w	r3, r3, #7
 80024e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	609a      	str	r2, [r3, #8]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b087      	sub	sp, #28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002514:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	021a      	lsls	r2, r3, #8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	431a      	orrs	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4313      	orrs	r3, r2
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	609a      	str	r2, [r3, #8]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800254c:	2302      	movs	r3, #2
 800254e:	e041      	b.n	80025d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d004      	beq.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10c      	bne.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40000400 	.word	0x40000400

080025e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <__libc_init_array>:
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	2600      	movs	r6, #0
 8002610:	4d0c      	ldr	r5, [pc, #48]	; (8002644 <__libc_init_array+0x38>)
 8002612:	4c0d      	ldr	r4, [pc, #52]	; (8002648 <__libc_init_array+0x3c>)
 8002614:	1b64      	subs	r4, r4, r5
 8002616:	10a4      	asrs	r4, r4, #2
 8002618:	42a6      	cmp	r6, r4
 800261a:	d109      	bne.n	8002630 <__libc_init_array+0x24>
 800261c:	f000 f822 	bl	8002664 <_init>
 8002620:	2600      	movs	r6, #0
 8002622:	4d0a      	ldr	r5, [pc, #40]	; (800264c <__libc_init_array+0x40>)
 8002624:	4c0a      	ldr	r4, [pc, #40]	; (8002650 <__libc_init_array+0x44>)
 8002626:	1b64      	subs	r4, r4, r5
 8002628:	10a4      	asrs	r4, r4, #2
 800262a:	42a6      	cmp	r6, r4
 800262c:	d105      	bne.n	800263a <__libc_init_array+0x2e>
 800262e:	bd70      	pop	{r4, r5, r6, pc}
 8002630:	f855 3b04 	ldr.w	r3, [r5], #4
 8002634:	4798      	blx	r3
 8002636:	3601      	adds	r6, #1
 8002638:	e7ee      	b.n	8002618 <__libc_init_array+0xc>
 800263a:	f855 3b04 	ldr.w	r3, [r5], #4
 800263e:	4798      	blx	r3
 8002640:	3601      	adds	r6, #1
 8002642:	e7f2      	b.n	800262a <__libc_init_array+0x1e>
 8002644:	0800269c 	.word	0x0800269c
 8002648:	0800269c 	.word	0x0800269c
 800264c:	0800269c 	.word	0x0800269c
 8002650:	080026a0 	.word	0x080026a0

08002654 <memset>:
 8002654:	4603      	mov	r3, r0
 8002656:	4402      	add	r2, r0
 8002658:	4293      	cmp	r3, r2
 800265a:	d100      	bne.n	800265e <memset+0xa>
 800265c:	4770      	bx	lr
 800265e:	f803 1b01 	strb.w	r1, [r3], #1
 8002662:	e7f9      	b.n	8002658 <memset+0x4>

08002664 <_init>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	bf00      	nop
 8002668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266a:	bc08      	pop	{r3}
 800266c:	469e      	mov	lr, r3
 800266e:	4770      	bx	lr

08002670 <_fini>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	bf00      	nop
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr
