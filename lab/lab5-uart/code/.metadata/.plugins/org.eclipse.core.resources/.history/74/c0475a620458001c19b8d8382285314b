/**
  ******************************************************************************
  * @file           : uart_communication_fsm.c
  * @brief          : This file contain the implementation of uart communication fsm.
  *
  *
  *                   Created on:	Dec 8th, 2021
  *                   Author:		Thien Long
  ******************************************************************************
  * @attention
  *
  ******************************************************************************
  */

#include "main.h"
#include "uart_communication_fsm.h"

enum CommandState {
	BEGIN,
	OK,
	WAIT_OK,
	RST,
	RETRANSMIT
};

static enum CommandState commandState = BEGIN;
static char *str;
static int len = 0;

void uart_communication_fsm(void) {
	switch(commandState) {
	case BEGIN:
		if (strcmp(&command_data, "RST") == 0 && command_flag == 1) {
			commandState = RST;
		}
		break;

	case WAIT_OK:
		if (is_timeout == 1) {
			commandState = RETRANSMIT;
		}

		else if (command_data == "OK" && command_flag == 1) {
			commandState = OK;
		}

		else {
			command_flag = 0;
		}
		break;

	case OK:
		//action
		command_flag = 0;
		//transition
		commandState = BEGIN;
		break;

	case RST:
		ADC_value = HAL_ADC_GetValue(&hadc1);
		len = sprintf(str, "!%hu#\r\n", ADC_value);
		HAL_UART_Transmit(&huart2, &str, len, 50);
		HAL_UART_Transmit(&huart2, "haha\r\n", 6, 50);
		command_flag = 0;
		commandState = WAIT_OK;
		break;

	case RETRANSMIT:
		is_timeout = 0;
		len = sprintf(str, "!%lu#\r\n", ADC_value);
		HAL_UART_Transmit(&huart2, (void *)str, len, 1000);

		commandState = WAIT_OK;
		break;
	}
}
