
lab5-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e30  08003e30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e30  08003e30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e30  08003e30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08003ea8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003ea8  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdf1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255f  00000000  00000000  0002fe8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  000323f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00033198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018368  00000000  00000000  00033e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f369  00000000  00000000  0004c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c920  00000000  00000000  0005b531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c2c  00000000  00000000  000e7ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003da4 	.word	0x08003da4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003da4 	.word	0x08003da4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <command_parser_fsm>:

static enum CharState cState = BEGIN;
static char commandStr[COMMAND_BUFFER];
static int str_index = 0;

void command_parser_fsm(char inputChar) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
	switch (cState) {
 800016a:	4b27      	ldr	r3, [pc, #156]	; (8000208 <command_parser_fsm+0xa8>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d002      	beq.n	8000178 <command_parser_fsm+0x18>
 8000172:	2b01      	cmp	r3, #1
 8000174:	d010      	beq.n	8000198 <command_parser_fsm+0x38>
			HAL_UART_Transmit(&huart2, &inputChar, 1, 50);
		}

		break;
	}
}
 8000176:	e042      	b.n	80001fe <command_parser_fsm+0x9e>
		commandStr[0] = '\0';
 8000178:	4b24      	ldr	r3, [pc, #144]	; (800020c <command_parser_fsm+0xac>)
 800017a:	2200      	movs	r2, #0
 800017c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, "!", 1, 50);
 800017e:	2332      	movs	r3, #50	; 0x32
 8000180:	2201      	movs	r2, #1
 8000182:	4923      	ldr	r1, [pc, #140]	; (8000210 <command_parser_fsm+0xb0>)
 8000184:	4823      	ldr	r0, [pc, #140]	; (8000214 <command_parser_fsm+0xb4>)
 8000186:	f002 fcae 	bl	8002ae6 <HAL_UART_Transmit>
		if (inputChar == '!') {
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	2b21      	cmp	r3, #33	; 0x21
 800018e:	d135      	bne.n	80001fc <command_parser_fsm+0x9c>
			cState = BODY;
 8000190:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <command_parser_fsm+0xa8>)
 8000192:	2201      	movs	r2, #1
 8000194:	701a      	strb	r2, [r3, #0]
		break;
 8000196:	e031      	b.n	80001fc <command_parser_fsm+0x9c>
		if (inputChar == '#') {
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	2b23      	cmp	r3, #35	; 0x23
 800019c:	d118      	bne.n	80001d0 <command_parser_fsm+0x70>
			commandStr[str_index] = '\0';
 800019e:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <command_parser_fsm+0xb8>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a1a      	ldr	r2, [pc, #104]	; (800020c <command_parser_fsm+0xac>)
 80001a4:	2100      	movs	r1, #0
 80001a6:	54d1      	strb	r1, [r2, r3]
			str_index = 0;
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <command_parser_fsm+0xb8>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
			strcpy(command_data, commandStr);
 80001ae:	4917      	ldr	r1, [pc, #92]	; (800020c <command_parser_fsm+0xac>)
 80001b0:	481a      	ldr	r0, [pc, #104]	; (800021c <command_parser_fsm+0xbc>)
 80001b2:	f003 f9d5 	bl	8003560 <strcpy>
			command_flag = 1;
 80001b6:	4b1a      	ldr	r3, [pc, #104]	; (8000220 <command_parser_fsm+0xc0>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, "#\r\n", 3, 50);
 80001bc:	2332      	movs	r3, #50	; 0x32
 80001be:	2203      	movs	r2, #3
 80001c0:	4918      	ldr	r1, [pc, #96]	; (8000224 <command_parser_fsm+0xc4>)
 80001c2:	4814      	ldr	r0, [pc, #80]	; (8000214 <command_parser_fsm+0xb4>)
 80001c4:	f002 fc8f 	bl	8002ae6 <HAL_UART_Transmit>
			cState = BEGIN;
 80001c8:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <command_parser_fsm+0xa8>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	701a      	strb	r2, [r3, #0]
		break;
 80001ce:	e016      	b.n	80001fe <command_parser_fsm+0x9e>
			commandStr[str_index++] = inputChar;
 80001d0:	4b11      	ldr	r3, [pc, #68]	; (8000218 <command_parser_fsm+0xb8>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	1c5a      	adds	r2, r3, #1
 80001d6:	4910      	ldr	r1, [pc, #64]	; (8000218 <command_parser_fsm+0xb8>)
 80001d8:	600a      	str	r2, [r1, #0]
 80001da:	79f9      	ldrb	r1, [r7, #7]
 80001dc:	4a0b      	ldr	r2, [pc, #44]	; (800020c <command_parser_fsm+0xac>)
 80001de:	54d1      	strb	r1, [r2, r3]
			if (str_index == COMMAND_BUFFER) {
 80001e0:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <command_parser_fsm+0xb8>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b0a      	cmp	r3, #10
 80001e6:	d102      	bne.n	80001ee <command_parser_fsm+0x8e>
				str_index = 0;
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <command_parser_fsm+0xb8>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &inputChar, 1, 50);
 80001ee:	1df9      	adds	r1, r7, #7
 80001f0:	2332      	movs	r3, #50	; 0x32
 80001f2:	2201      	movs	r2, #1
 80001f4:	4807      	ldr	r0, [pc, #28]	; (8000214 <command_parser_fsm+0xb4>)
 80001f6:	f002 fc76 	bl	8002ae6 <HAL_UART_Transmit>
		break;
 80001fa:	e000      	b.n	80001fe <command_parser_fsm+0x9e>
		break;
 80001fc:	bf00      	nop
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000008c 	.word	0x2000008c
 800020c:	20000090 	.word	0x20000090
 8000210:	08003dbc 	.word	0x08003dbc
 8000214:	20000178 	.word	0x20000178
 8000218:	2000009c 	.word	0x2000009c
 800021c:	200000d4 	.word	0x200000d4
 8000220:	200000a4 	.word	0x200000a4
 8000224:	08003dc0 	.word	0x08003dc0

08000228 <HAL_UART_RxCpltCallback>:

uint8_t is_timeout = 0;

uint32_t ADC_value = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <HAL_UART_RxCpltCallback+0x50>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d119      	bne.n	800026e <HAL_UART_RxCpltCallback+0x46>
		buffer[index_buffer++] = temp;
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <HAL_UART_RxCpltCallback+0x54>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	1c5a      	adds	r2, r3, #1
 8000240:	b2d1      	uxtb	r1, r2
 8000242:	4a0e      	ldr	r2, [pc, #56]	; (800027c <HAL_UART_RxCpltCallback+0x54>)
 8000244:	7011      	strb	r1, [r2, #0]
 8000246:	461a      	mov	r2, r3
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <HAL_UART_RxCpltCallback+0x58>)
 800024a:	7819      	ldrb	r1, [r3, #0]
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <HAL_UART_RxCpltCallback+0x5c>)
 800024e:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <HAL_UART_RxCpltCallback+0x54>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b1e      	cmp	r3, #30
 8000256:	d102      	bne.n	800025e <HAL_UART_RxCpltCallback+0x36>
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <HAL_UART_RxCpltCallback+0x54>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <HAL_UART_RxCpltCallback+0x60>)
 8000260:	2201      	movs	r2, #1
 8000262:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2 , &temp , 1);
 8000264:	2201      	movs	r2, #1
 8000266:	4906      	ldr	r1, [pc, #24]	; (8000280 <HAL_UART_RxCpltCallback+0x58>)
 8000268:	4808      	ldr	r0, [pc, #32]	; (800028c <HAL_UART_RxCpltCallback+0x64>)
 800026a:	f002 fcce 	bl	8002c0a <HAL_UART_Receive_IT>
	}
}
 800026e:	bf00      	nop
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40004400 	.word	0x40004400
 800027c:	200000a1 	.word	0x200000a1
 8000280:	200000a0 	.word	0x200000a0
 8000284:	20000110 	.word	0x20000110
 8000288:	200000a3 	.word	0x200000a3
 800028c:	20000178 	.word	0x20000178

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fc4e 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f840 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f942 	bl	8000524 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002a0:	f000 f88c 	bl	80003bc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80002a4:	f000 f914 	bl	80004d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80002a8:	f000 f8c6 	bl	8000438 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  software_timer_init();
 80002ac:	f000 f98e 	bl	80005cc <software_timer_init>
  HAL_ADC_Start(&hadc1);
 80002b0:	4813      	ldr	r0, [pc, #76]	; (8000300 <main+0x70>)
 80002b2:	f000 fd79 	bl	8000da8 <HAL_ADC_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80002b6:	2201      	movs	r2, #1
 80002b8:	4912      	ldr	r1, [pc, #72]	; (8000304 <main+0x74>)
 80002ba:	4813      	ldr	r0, [pc, #76]	; (8000308 <main+0x78>)
 80002bc:	f002 fca5 	bl	8002c0a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80002c0:	4812      	ldr	r0, [pc, #72]	; (800030c <main+0x7c>)
 80002c2:	f002 f82f 	bl	8002324 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (buffer_flag == 1) {
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <main+0x80>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d115      	bne.n	80002fa <main+0x6a>
			  command_parser_fsm((char)buffer[curr_index_buffer++]);
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <main+0x84>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	b2d1      	uxtb	r1, r2
 80002d6:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <main+0x84>)
 80002d8:	7011      	strb	r1, [r2, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <main+0x88>)
 80002de:	5c9b      	ldrb	r3, [r3, r2]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff3d 	bl	8000160 <command_parser_fsm>
			  if (curr_index_buffer == 30) curr_index_buffer = 0;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <main+0x84>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b1e      	cmp	r3, #30
 80002ec:	d102      	bne.n	80002f4 <main+0x64>
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <main+0x84>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
			  buffer_flag = 0;
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <main+0x80>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]
		  }

	  uart_communication_fsm();
 80002fa:	f000 fb53 	bl	80009a4 <uart_communication_fsm>
	  if (buffer_flag == 1) {
 80002fe:	e7e2      	b.n	80002c6 <main+0x36>
 8000300:	200000e0 	.word	0x200000e0
 8000304:	200000a0 	.word	0x200000a0
 8000308:	20000178 	.word	0x20000178
 800030c:	20000130 	.word	0x20000130
 8000310:	200000a3 	.word	0x200000a3
 8000314:	200000a2 	.word	0x200000a2
 8000318:	20000110 	.word	0x20000110

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b094      	sub	sp, #80	; 0x50
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000326:	2228      	movs	r2, #40	; 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f003 f8f0 	bl	8003510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034c:	2301      	movs	r3, #1
 800034e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000354:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000356:	2300      	movs	r3, #0
 8000358:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fac0 	bl	80018e4 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x52>
  {
    Error_Handler();
 800036a:	f000 f929 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000372:	2301      	movs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2100      	movs	r1, #0
 8000388:	4618      	mov	r0, r3
 800038a:	f001 fd2b 	bl	8001de4 <HAL_RCC_ClockConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000394:	f000 f914 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000398:	2302      	movs	r3, #2
 800039a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 feb8 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003ae:	f000 f907 	bl	80005c0 <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3750      	adds	r7, #80	; 0x50
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_ADC1_Init+0x74>)
 80003ce:	4a19      	ldr	r2, [pc, #100]	; (8000434 <MX_ADC1_Init+0x78>)
 80003d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <MX_ADC1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <MX_ADC1_Init+0x74>)
 80003da:	2201      	movs	r2, #1
 80003dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_ADC1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <MX_ADC1_Init+0x74>)
 80003e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ec:	4b10      	ldr	r3, [pc, #64]	; (8000430 <MX_ADC1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_ADC1_Init+0x74>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <MX_ADC1_Init+0x74>)
 80003fa:	f000 fbfd 	bl	8000bf8 <HAL_ADC_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000404:	f000 f8dc 	bl	80005c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000408:	2300      	movs	r3, #0
 800040a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800040c:	2301      	movs	r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4619      	mov	r1, r3
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_ADC1_Init+0x74>)
 800041a:	f000 fd7f 	bl	8000f1c <HAL_ADC_ConfigChannel>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000424:	f000 f8cc 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200000e0 	.word	0x200000e0
 8000434:	40012400 	.word	0x40012400

08000438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043e:	f107 0308 	add.w	r3, r7, #8
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044c:	463b      	mov	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <MX_TIM2_Init+0x94>)
 8000456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000 - 1;
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_TIM2_Init+0x94>)
 800045e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000462:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MX_TIM2_Init+0x94>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 - 1;
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_TIM2_Init+0x94>)
 800046c:	2263      	movs	r2, #99	; 0x63
 800046e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <MX_TIM2_Init+0x94>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_TIM2_Init+0x94>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800047c:	4813      	ldr	r0, [pc, #76]	; (80004cc <MX_TIM2_Init+0x94>)
 800047e:	f001 ff01 	bl	8002284 <HAL_TIM_Base_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000488:	f000 f89a 	bl	80005c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800048c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000492:	f107 0308 	add.w	r3, r7, #8
 8000496:	4619      	mov	r1, r3
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <MX_TIM2_Init+0x94>)
 800049a:	f002 f897 	bl	80025cc <HAL_TIM_ConfigClockSource>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004a4:	f000 f88c 	bl	80005c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a8:	2300      	movs	r3, #0
 80004aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b0:	463b      	mov	r3, r7
 80004b2:	4619      	mov	r1, r3
 80004b4:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_TIM2_Init+0x94>)
 80004b6:	f002 fa5f 	bl	8002978 <HAL_TIMEx_MasterConfigSynchronization>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004c0:	f000 f87e 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	3718      	adds	r7, #24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000130 	.word	0x20000130

080004d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <MX_USART2_UART_Init+0x50>)
 80004d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004f6:	220c      	movs	r2, #12
 80004f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_USART2_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_USART2_UART_Init+0x4c>)
 8000508:	f002 faa0 	bl	8002a4c <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000512:	f000 f855 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000178 	.word	0x20000178
 8000520:	40004400 	.word	0x40004400

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0308 	add.w	r3, r7, #8
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_GPIO_Init+0x74>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a16      	ldr	r2, [pc, #88]	; (8000598 <MX_GPIO_Init+0x74>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_GPIO_Init+0x74>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0320 	and.w	r3, r3, #32
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_GPIO_Init+0x74>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a10      	ldr	r2, [pc, #64]	; (8000598 <MX_GPIO_Init+0x74>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_GPIO_Init+0x74>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_GPIO_Init+0x78>)
 800056e:	f001 f9a1 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000572:	2320      	movs	r3, #32
 8000574:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2302      	movs	r3, #2
 8000580:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	4619      	mov	r1, r3
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_GPIO_Init+0x78>)
 800058a:	f001 f819 	bl	80015c0 <HAL_GPIO_Init>

}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	40010800 	.word	0x40010800

080005a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b0:	d102      	bne.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0x18>
		timer_run(0);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f86c 	bl	8000690 <timer_run>
	}
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <software_timer_init>:
#include "main.h"

static int timer_counter[NO_OF_TIMERS];
static int timer_flag[NO_OF_TIMERS];

void software_timer_init(void) {
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
	for (char i = 0; i < NO_OF_TIMERS; i++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	71fb      	strb	r3, [r7, #7]
 80005d6:	e00c      	b.n	80005f2 <software_timer_init+0x26>
		timer_counter[i] = 0;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <software_timer_init+0x38>)
 80005dc:	2100      	movs	r1, #0
 80005de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timer_flag[i] = 0;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4a08      	ldr	r2, [pc, #32]	; (8000608 <software_timer_init+0x3c>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (char i = 0; i < NO_OF_TIMERS; i++) {
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	3301      	adds	r3, #1
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0ef      	beq.n	80005d8 <software_timer_init+0xc>
	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	200000ac 	.word	0x200000ac
 8000608:	200000b0 	.word	0x200000b0

0800060c <get_timer_flag_value>:

int get_timer_flag_value(int idx) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if (idx < 0 || idx > NO_OF_TIMERS) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	db02      	blt.n	8000620 <get_timer_flag_value+0x14>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b01      	cmp	r3, #1
 800061e:	dd02      	ble.n	8000626 <get_timer_flag_value+0x1a>
		return -1;
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	e003      	b.n	800062e <get_timer_flag_value+0x22>
	}

	return timer_flag[idx];
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <get_timer_flag_value+0x2c>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	200000b0 	.word	0x200000b0

0800063c <setTimer>:

void setTimer(int idx, int duration) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	if (idx < 0 || idx > NO_OF_TIMERS || duration < 0) {
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db16      	blt.n	800067a <setTimer+0x3e>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b01      	cmp	r3, #1
 8000650:	dc13      	bgt.n	800067a <setTimer+0x3e>
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db10      	blt.n	800067a <setTimer+0x3e>
		return;
	}

	timer_counter[idx] = duration / TIMER_CYCLE;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <setTimer+0x48>)
 800065c:	fb82 1203 	smull	r1, r2, r2, r3
 8000660:	1152      	asrs	r2, r2, #5
 8000662:	17db      	asrs	r3, r3, #31
 8000664:	1ad2      	subs	r2, r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <setTimer+0x4c>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[idx] = 0;
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <setTimer+0x50>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2100      	movs	r1, #0
 8000674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000678:	e000      	b.n	800067c <setTimer+0x40>
		return;
 800067a:	bf00      	nop
}
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	51eb851f 	.word	0x51eb851f
 8000688:	200000ac 	.word	0x200000ac
 800068c:	200000b0 	.word	0x200000b0

08000690 <timer_run>:

void timer_run(int idx) {
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	if (idx < 0 || idx > NO_OF_TIMERS) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	db1d      	blt.n	80006da <timer_run+0x4a>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	dc1a      	bgt.n	80006da <timer_run+0x4a>
		return;
	}

	if (timer_counter[idx] > 0) {
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <timer_run+0x54>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dd15      	ble.n	80006dc <timer_run+0x4c>
		timer_counter[idx]--;
 80006b0:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <timer_run+0x54>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b8:	1e5a      	subs	r2, r3, #1
 80006ba:	490a      	ldr	r1, [pc, #40]	; (80006e4 <timer_run+0x54>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (timer_counter[idx] == 0) {
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <timer_run+0x54>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d106      	bne.n	80006dc <timer_run+0x4c>
			timer_flag[idx] = 1;
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <timer_run+0x58>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2101      	movs	r1, #1
 80006d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80006d8:	e000      	b.n	80006dc <timer_run+0x4c>
		return;
 80006da:	bf00      	nop
		}
	}
}
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	200000b0 	.word	0x200000b0

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_MspInit+0x5c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <HAL_MspInit+0x5c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x5c>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x5c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_MspInit+0x60>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_MspInit+0x60>)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000
 800074c:	40010000 	.word	0x40010000

08000750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_ADC_MspInit+0x6c>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d121      	bne.n	80007b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 8000776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a4:	2303      	movs	r3, #3
 80007a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <HAL_ADC_MspInit+0x74>)
 80007b0:	f000 ff06 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40012400 	.word	0x40012400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800

080007c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d8:	d113      	bne.n	8000802 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_TIM_Base_MspInit+0x44>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <HAL_TIM_Base_MspInit+0x44>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_TIM_Base_MspInit+0x44>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	201c      	movs	r0, #28
 80007f8:	f000 fdfb 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007fc:	201c      	movs	r0, #28
 80007fe:	f000 fe14 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <HAL_UART_MspInit+0x98>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d137      	bne.n	80008a0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <HAL_UART_MspInit+0x9c>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <HAL_UART_MspInit+0x9c>)
 8000836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083a:	61d3      	str	r3, [r2, #28]
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <HAL_UART_MspInit+0x9c>)
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_UART_MspInit+0x9c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_UART_MspInit+0x9c>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_UART_MspInit+0x9c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000860:	2304      	movs	r3, #4
 8000862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	480f      	ldr	r0, [pc, #60]	; (80008b0 <HAL_UART_MspInit+0xa0>)
 8000874:	f000 fea4 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000878:	2308      	movs	r3, #8
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_UART_MspInit+0xa0>)
 800088c:	f000 fe98 	bl	80015c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	2026      	movs	r0, #38	; 0x26
 8000896:	f000 fdac 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800089a:	2026      	movs	r0, #38	; 0x26
 800089c:	f000 fdc5 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40004400 	.word	0x40004400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f000 f961 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM2_IRQHandler+0x10>)
 800090a:	f001 fd57 	bl	80023bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000130 	.word	0x20000130

08000918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART2_IRQHandler+0x10>)
 800091e:	f002 f9a5 	bl	8002c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000178 	.word	0x20000178

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f002 fdae 	bl	80034bc <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20002800 	.word	0x20002800
 800098c:	00000400 	.word	0x00000400
 8000990:	200000b4 	.word	0x200000b4
 8000994:	200001d0 	.word	0x200001d0

08000998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <uart_communication_fsm>:

static enum CommandState commandState = BEGIN;
static char str[10];
static int len = 0;

void uart_communication_fsm(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	switch(commandState) {
 80009a8:	4b44      	ldr	r3, [pc, #272]	; (8000abc <uart_communication_fsm+0x118>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	f200 8082 	bhi.w	8000ab6 <uart_communication_fsm+0x112>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <uart_communication_fsm+0x14>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009cd 	.word	0x080009cd
 80009bc:	08000a25 	.word	0x08000a25
 80009c0:	080009eb 	.word	0x080009eb
 80009c4:	08000a33 	.word	0x08000a33
 80009c8:	08000a7d 	.word	0x08000a7d
	case BEGIN:
		if (strcmp(&command_data, "RST") == 0 && command_flag == 1) {
 80009cc:	493c      	ldr	r1, [pc, #240]	; (8000ac0 <uart_communication_fsm+0x11c>)
 80009ce:	483d      	ldr	r0, [pc, #244]	; (8000ac4 <uart_communication_fsm+0x120>)
 80009d0:	f7ff fbbc 	bl	800014c <strcmp>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d16c      	bne.n	8000ab4 <uart_communication_fsm+0x110>
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <uart_communication_fsm+0x124>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d168      	bne.n	8000ab4 <uart_communication_fsm+0x110>
			commandState = RST;
 80009e2:	4b36      	ldr	r3, [pc, #216]	; (8000abc <uart_communication_fsm+0x118>)
 80009e4:	2203      	movs	r2, #3
 80009e6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80009e8:	e064      	b.n	8000ab4 <uart_communication_fsm+0x110>

	case WAIT_OK:
		if (get_timer_flag_value(0)) {
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fe0e 	bl	800060c <get_timer_flag_value>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <uart_communication_fsm+0x5a>
			commandState = RETRANSMIT;
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <uart_communication_fsm+0x118>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	701a      	strb	r2, [r3, #0]
		}

		else {
			command_flag = 0;
		}
		break;
 80009fc:	e05b      	b.n	8000ab6 <uart_communication_fsm+0x112>
		else if (strcmp(&command_data, "OK") == 0 && command_flag == 1) {
 80009fe:	4933      	ldr	r1, [pc, #204]	; (8000acc <uart_communication_fsm+0x128>)
 8000a00:	4830      	ldr	r0, [pc, #192]	; (8000ac4 <uart_communication_fsm+0x120>)
 8000a02:	f7ff fba3 	bl	800014c <strcmp>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d107      	bne.n	8000a1c <uart_communication_fsm+0x78>
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <uart_communication_fsm+0x124>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d103      	bne.n	8000a1c <uart_communication_fsm+0x78>
			commandState = OK;
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <uart_communication_fsm+0x118>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
		break;
 8000a1a:	e04c      	b.n	8000ab6 <uart_communication_fsm+0x112>
			command_flag = 0;
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <uart_communication_fsm+0x124>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
		break;
 8000a22:	e048      	b.n	8000ab6 <uart_communication_fsm+0x112>

	case OK:
		//action
		command_flag = 0;
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <uart_communication_fsm+0x124>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		//transition
		commandState = BEGIN;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <uart_communication_fsm+0x118>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
		break;
 8000a30:	e041      	b.n	8000ab6 <uart_communication_fsm+0x112>

	case RST:
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000a32:	4827      	ldr	r0, [pc, #156]	; (8000ad0 <uart_communication_fsm+0x12c>)
 8000a34:	f000 fa66 	bl	8000f04 <HAL_ADC_GetValue>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a26      	ldr	r2, [pc, #152]	; (8000ad4 <uart_communication_fsm+0x130>)
 8000a3c:	6013      	str	r3, [r2, #0]
		len = sprintf(str, "!%hu#\r\n", ADC_value);
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <uart_communication_fsm+0x130>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4924      	ldr	r1, [pc, #144]	; (8000ad8 <uart_communication_fsm+0x134>)
 8000a46:	4825      	ldr	r0, [pc, #148]	; (8000adc <uart_communication_fsm+0x138>)
 8000a48:	f002 fd6a 	bl	8003520 <siprintf>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a24      	ldr	r2, [pc, #144]	; (8000ae0 <uart_communication_fsm+0x13c>)
 8000a50:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, &str, len, 1000);
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <uart_communication_fsm+0x13c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5c:	491f      	ldr	r1, [pc, #124]	; (8000adc <uart_communication_fsm+0x138>)
 8000a5e:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <uart_communication_fsm+0x140>)
 8000a60:	f002 f841 	bl	8002ae6 <HAL_UART_Transmit>
		command_flag = 0;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <uart_communication_fsm+0x124>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
		setTimer(0, 1000);
 8000a6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fde4 	bl	800063c <setTimer>
		commandState = WAIT_OK;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <uart_communication_fsm+0x118>)
 8000a76:	2202      	movs	r2, #2
 8000a78:	701a      	strb	r2, [r3, #0]
		break;
 8000a7a:	e01c      	b.n	8000ab6 <uart_communication_fsm+0x112>

	case RETRANSMIT:
		len = sprintf(str, "!%hu#\r\n", ADC_value);
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <uart_communication_fsm+0x130>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4915      	ldr	r1, [pc, #84]	; (8000ad8 <uart_communication_fsm+0x134>)
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <uart_communication_fsm+0x138>)
 8000a86:	f002 fd4b 	bl	8003520 <siprintf>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <uart_communication_fsm+0x13c>)
 8000a8e:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, &str, len, 1000);
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <uart_communication_fsm+0x13c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	4910      	ldr	r1, [pc, #64]	; (8000adc <uart_communication_fsm+0x138>)
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <uart_communication_fsm+0x140>)
 8000a9e:	f002 f822 	bl	8002ae6 <HAL_UART_Transmit>
		setTimer(0, 1000);
 8000aa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fdc8 	bl	800063c <setTimer>

		commandState = WAIT_OK;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <uart_communication_fsm+0x118>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	701a      	strb	r2, [r3, #0]
		break;
 8000ab2:	e000      	b.n	8000ab6 <uart_communication_fsm+0x112>
		break;
 8000ab4:	bf00      	nop
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000b8 	.word	0x200000b8
 8000ac0:	08003dc4 	.word	0x08003dc4
 8000ac4:	200000d4 	.word	0x200000d4
 8000ac8:	200000a4 	.word	0x200000a4
 8000acc:	08003dc8 	.word	0x08003dc8
 8000ad0:	200000e0 	.word	0x200000e0
 8000ad4:	200000a8 	.word	0x200000a8
 8000ad8:	08003dcc 	.word	0x08003dcc
 8000adc:	200000bc 	.word	0x200000bc
 8000ae0:	200000c8 	.word	0x200000c8
 8000ae4:	20000178 	.word	0x20000178

08000ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aea:	490d      	ldr	r1, [pc, #52]	; (8000b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b00:	4c0a      	ldr	r4, [pc, #40]	; (8000b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b0e:	f7ff ff43 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 fcd9 	bl	80034c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b16:	f7ff fbbb 	bl	8000290 <main>
  bx lr
 8000b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b24:	08003e38 	.word	0x08003e38
  ldr r2, =_sbss
 8000b28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b2c:	200001d0 	.word	0x200001d0

08000b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_2_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_Init+0x28>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_Init+0x28>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 fc49 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f000 f808 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fdcc 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40022000 	.word	0x40022000

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_InitTick+0x54>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_InitTick+0x58>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fc61 	bl	8001446 <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00e      	b.n	8000bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d80a      	bhi.n	8000baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 fc29 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <HAL_InitTick+0x5c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x1c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_IncTick+0x20>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <HAL_IncTick+0x20>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	200001bc 	.word	0x200001bc

08000be4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <HAL_GetTick+0x10>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	200001bc 	.word	0x200001bc

08000bf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e0be      	b.n	8000d98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d109      	bne.n	8000c3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fd8a 	bl	8000750 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 fabf 	bl	80011c0 <ADC_ConversionStop_Disable>
 8000c42:	4603      	mov	r3, r0
 8000c44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f040 8099 	bne.w	8000d86 <HAL_ADC_Init+0x18e>
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8095 	bne.w	8000d86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c64:	f023 0302 	bic.w	r3, r3, #2
 8000c68:	f043 0202 	orr.w	r2, r3, #2
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7b1b      	ldrb	r3, [r3, #12]
 8000c7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c90:	d003      	beq.n	8000c9a <HAL_ADC_Init+0xa2>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d102      	bne.n	8000ca0 <HAL_ADC_Init+0xa8>
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	e000      	b.n	8000ca2 <HAL_ADC_Init+0xaa>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7d1b      	ldrb	r3, [r3, #20]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d119      	bne.n	8000ce4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7b1b      	ldrb	r3, [r3, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d109      	bne.n	8000ccc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	035a      	lsls	r2, r3, #13
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	e00b      	b.n	8000ce4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd0:	f043 0220 	orr.w	r2, r3, #32
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	f043 0201 	orr.w	r2, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <HAL_ADC_Init+0x1a8>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d14:	d003      	beq.n	8000d1e <HAL_ADC_Init+0x126>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d104      	bne.n	8000d28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	051b      	lsls	r3, r3, #20
 8000d26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_ADC_Init+0x1ac>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d10b      	bne.n	8000d64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d56:	f023 0303 	bic.w	r3, r3, #3
 8000d5a:	f043 0201 	orr.w	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d62:	e018      	b.n	8000d96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f023 0312 	bic.w	r3, r3, #18
 8000d6c:	f043 0210 	orr.w	r2, r3, #16
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	f043 0201 	orr.w	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d84:	e007      	b.n	8000d96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8a:	f043 0210 	orr.w	r2, r3, #16
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	ffe1f7fd 	.word	0xffe1f7fd
 8000da4:	ff1f0efe 	.word	0xff1f0efe

08000da8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d101      	bne.n	8000dc2 <HAL_ADC_Start+0x1a>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e098      	b.n	8000ef4 <HAL_ADC_Start+0x14c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f99e 	bl	800110c <ADC_Enable>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f040 8087 	bne.w	8000eea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000de4:	f023 0301 	bic.w	r3, r3, #1
 8000de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a41      	ldr	r2, [pc, #260]	; (8000efc <HAL_ADC_Start+0x154>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d105      	bne.n	8000e06 <HAL_ADC_Start+0x5e>
 8000dfa:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <HAL_ADC_Start+0x158>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d115      	bne.n	8000e32 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d026      	beq.n	8000e6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e30:	e01d      	b.n	8000e6e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <HAL_ADC_Start+0x158>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d004      	beq.n	8000e52 <HAL_ADC_Start+0xaa>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2b      	ldr	r2, [pc, #172]	; (8000efc <HAL_ADC_Start+0x154>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10d      	bne.n	8000e6e <HAL_ADC_Start+0xc6>
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <HAL_ADC_Start+0x158>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d007      	beq.n	8000e6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	f023 0206 	bic.w	r2, r3, #6
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e86:	e002      	b.n	8000e8e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f06f 0202 	mvn.w	r2, #2
 8000e9e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eaa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eae:	d113      	bne.n	8000ed8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000eb4:	4a11      	ldr	r2, [pc, #68]	; (8000efc <HAL_ADC_Start+0x154>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d105      	bne.n	8000ec6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_ADC_Start+0x158>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d108      	bne.n	8000ed8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	e00c      	b.n	8000ef2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	e003      	b.n	8000ef2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40012800 	.word	0x40012800
 8000f00:	40012400 	.word	0x40012400

08000f04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x20>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e0dc      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x1da>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b06      	cmp	r3, #6
 8000f4a:	d81c      	bhi.n	8000f86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3b05      	subs	r3, #5
 8000f5e:	221f      	movs	r2, #31
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4019      	ands	r1, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	3b05      	subs	r3, #5
 8000f78:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
 8000f84:	e03c      	b.n	8001000 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b0c      	cmp	r3, #12
 8000f8c:	d81c      	bhi.n	8000fc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3b23      	subs	r3, #35	; 0x23
 8000fa0:	221f      	movs	r2, #31
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	4019      	ands	r1, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b23      	subs	r3, #35	; 0x23
 8000fba:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc6:	e01b      	b.n	8001000 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b41      	subs	r3, #65	; 0x41
 8000fda:	221f      	movs	r2, #31
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4019      	ands	r1, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3b41      	subs	r3, #65	; 0x41
 8000ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b09      	cmp	r3, #9
 8001006:	d91c      	bls.n	8001042 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68d9      	ldr	r1, [r3, #12]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	3b1e      	subs	r3, #30
 800101a:	2207      	movs	r2, #7
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	4019      	ands	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	6898      	ldr	r0, [r3, #8]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	3b1e      	subs	r3, #30
 8001034:	fa00 f203 	lsl.w	r2, r0, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	e019      	b.n	8001076 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6919      	ldr	r1, [r3, #16]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	2207      	movs	r2, #7
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	4019      	ands	r1, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6898      	ldr	r0, [r3, #8]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	fa00 f203 	lsl.w	r2, r0, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b10      	cmp	r3, #16
 800107c:	d003      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001082:	2b11      	cmp	r3, #17
 8001084:	d132      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_ADC_ConfigChannel+0x1e4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d125      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d126      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d11a      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_ADC_ConfigChannel+0x1e8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <HAL_ADC_ConfigChannel+0x1ec>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	0c9a      	lsrs	r2, r3, #18
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010cc:	e002      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <HAL_ADC_ConfigChannel+0x1b2>
 80010da:	e007      	b.n	80010ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f043 0220 	orr.w	r2, r3, #32
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40012400 	.word	0x40012400
 8001104:	20000000 	.word	0x20000000
 8001108:	431bde83 	.word	0x431bde83

0800110c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d040      	beq.n	80011ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0201 	orr.w	r2, r2, #1
 8001138:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <ADC_Enable+0xac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <ADC_Enable+0xb0>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	0c9b      	lsrs	r3, r3, #18
 8001146:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001148:	e002      	b.n	8001150 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3b01      	subs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001156:	f7ff fd45 	bl	8000be4 <HAL_GetTick>
 800115a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800115c:	e01f      	b.n	800119e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800115e:	f7ff fd41 	bl	8000be4 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d918      	bls.n	800119e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b01      	cmp	r3, #1
 8001178:	d011      	beq.n	800119e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117e:	f043 0210 	orr.w	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	f043 0201 	orr.w	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e007      	b.n	80011ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d1d8      	bne.n	800115e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000
 80011bc:	431bde83 	.word	0x431bde83

080011c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12e      	bne.n	8001238 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011ea:	f7ff fcfb 	bl	8000be4 <HAL_GetTick>
 80011ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011f0:	e01b      	b.n	800122a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011f2:	f7ff fcf7 	bl	8000be4 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d914      	bls.n	800122a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10d      	bne.n	800122a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	f043 0210 	orr.w	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e007      	b.n	800123a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d0dc      	beq.n	80011f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0b      	blt.n	80012d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	4906      	ldr	r1, [pc, #24]	; (80012dc <__NVIC_EnableIRQ+0x34>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff90 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff2d 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff42 	bl	800128c <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff90 	bl	8001334 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5f 	bl	80012e0 <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff35 	bl	80012a8 <__NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffa2 	bl	8001398 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001470:	2b02      	cmp	r3, #2
 8001472:	d008      	beq.n	8001486 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2204      	movs	r2, #4
 8001478:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e020      	b.n	80014c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 020e 	bic.w	r2, r2, #14
 8001494:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d005      	beq.n	80014f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2204      	movs	r2, #4
 80014ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e051      	b.n	800159a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 020e 	bic.w	r2, r2, #14
 8001504:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <HAL_DMA_Abort_IT+0xd0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d029      	beq.n	8001574 <HAL_DMA_Abort_IT+0xa0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a20      	ldr	r2, [pc, #128]	; (80015a8 <HAL_DMA_Abort_IT+0xd4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d022      	beq.n	8001570 <HAL_DMA_Abort_IT+0x9c>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <HAL_DMA_Abort_IT+0xd8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d01a      	beq.n	800156a <HAL_DMA_Abort_IT+0x96>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <HAL_DMA_Abort_IT+0xdc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d012      	beq.n	8001564 <HAL_DMA_Abort_IT+0x90>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <HAL_DMA_Abort_IT+0xe0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d00a      	beq.n	800155e <HAL_DMA_Abort_IT+0x8a>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <HAL_DMA_Abort_IT+0xe4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d102      	bne.n	8001558 <HAL_DMA_Abort_IT+0x84>
 8001552:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001556:	e00e      	b.n	8001576 <HAL_DMA_Abort_IT+0xa2>
 8001558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800155c:	e00b      	b.n	8001576 <HAL_DMA_Abort_IT+0xa2>
 800155e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001562:	e008      	b.n	8001576 <HAL_DMA_Abort_IT+0xa2>
 8001564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001568:	e005      	b.n	8001576 <HAL_DMA_Abort_IT+0xa2>
 800156a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156e:	e002      	b.n	8001576 <HAL_DMA_Abort_IT+0xa2>
 8001570:	2310      	movs	r3, #16
 8001572:	e000      	b.n	8001576 <HAL_DMA_Abort_IT+0xa2>
 8001574:	2301      	movs	r3, #1
 8001576:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_DMA_Abort_IT+0xe8>)
 8001578:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
    } 
  }
  return status;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40020008 	.word	0x40020008
 80015a8:	4002001c 	.word	0x4002001c
 80015ac:	40020030 	.word	0x40020030
 80015b0:	40020044 	.word	0x40020044
 80015b4:	40020058 	.word	0x40020058
 80015b8:	4002006c 	.word	0x4002006c
 80015bc:	40020000 	.word	0x40020000

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b08b      	sub	sp, #44	; 0x2c
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	e148      	b.n	8001866 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d4:	2201      	movs	r2, #1
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8137 	bne.w	8001860 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4aa3      	ldr	r2, [pc, #652]	; (8001884 <HAL_GPIO_Init+0x2c4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d05e      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 80015fc:	4aa1      	ldr	r2, [pc, #644]	; (8001884 <HAL_GPIO_Init+0x2c4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d875      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001602:	4aa1      	ldr	r2, [pc, #644]	; (8001888 <HAL_GPIO_Init+0x2c8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d058      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001608:	4a9f      	ldr	r2, [pc, #636]	; (8001888 <HAL_GPIO_Init+0x2c8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d86f      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800160e:	4a9f      	ldr	r2, [pc, #636]	; (800188c <HAL_GPIO_Init+0x2cc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d052      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001614:	4a9d      	ldr	r2, [pc, #628]	; (800188c <HAL_GPIO_Init+0x2cc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d869      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800161a:	4a9d      	ldr	r2, [pc, #628]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d04c      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 8001620:	4a9b      	ldr	r2, [pc, #620]	; (8001890 <HAL_GPIO_Init+0x2d0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d863      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001626:	4a9b      	ldr	r2, [pc, #620]	; (8001894 <HAL_GPIO_Init+0x2d4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d046      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
 800162c:	4a99      	ldr	r2, [pc, #612]	; (8001894 <HAL_GPIO_Init+0x2d4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d85d      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 8001632:	2b12      	cmp	r3, #18
 8001634:	d82a      	bhi.n	800168c <HAL_GPIO_Init+0xcc>
 8001636:	2b12      	cmp	r3, #18
 8001638:	d859      	bhi.n	80016ee <HAL_GPIO_Init+0x12e>
 800163a:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <HAL_GPIO_Init+0x80>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	080016bb 	.word	0x080016bb
 8001644:	08001695 	.word	0x08001695
 8001648:	080016a7 	.word	0x080016a7
 800164c:	080016e9 	.word	0x080016e9
 8001650:	080016ef 	.word	0x080016ef
 8001654:	080016ef 	.word	0x080016ef
 8001658:	080016ef 	.word	0x080016ef
 800165c:	080016ef 	.word	0x080016ef
 8001660:	080016ef 	.word	0x080016ef
 8001664:	080016ef 	.word	0x080016ef
 8001668:	080016ef 	.word	0x080016ef
 800166c:	080016ef 	.word	0x080016ef
 8001670:	080016ef 	.word	0x080016ef
 8001674:	080016ef 	.word	0x080016ef
 8001678:	080016ef 	.word	0x080016ef
 800167c:	080016ef 	.word	0x080016ef
 8001680:	080016ef 	.word	0x080016ef
 8001684:	0800169d 	.word	0x0800169d
 8001688:	080016b1 	.word	0x080016b1
 800168c:	4a82      	ldr	r2, [pc, #520]	; (8001898 <HAL_GPIO_Init+0x2d8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001692:	e02c      	b.n	80016ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e029      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	3304      	adds	r3, #4
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e024      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	3308      	adds	r3, #8
 80016ac:	623b      	str	r3, [r7, #32]
          break;
 80016ae:	e01f      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	330c      	adds	r3, #12
 80016b6:	623b      	str	r3, [r7, #32]
          break;
 80016b8:	e01a      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016c2:	2304      	movs	r3, #4
 80016c4:	623b      	str	r3, [r7, #32]
          break;
 80016c6:	e013      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	611a      	str	r2, [r3, #16]
          break;
 80016da:	e009      	b.n	80016f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016dc:	2308      	movs	r3, #8
 80016de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	615a      	str	r2, [r3, #20]
          break;
 80016e6:	e003      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
          break;
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x130>
          break;
 80016ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2bff      	cmp	r3, #255	; 0xff
 80016f4:	d801      	bhi.n	80016fa <HAL_GPIO_Init+0x13a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	e001      	b.n	80016fe <HAL_GPIO_Init+0x13e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3304      	adds	r3, #4
 80016fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d802      	bhi.n	800170c <HAL_GPIO_Init+0x14c>
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x152>
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	3b08      	subs	r3, #8
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	210f      	movs	r1, #15
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	6a39      	ldr	r1, [r7, #32]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	431a      	orrs	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8090 	beq.w	8001860 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001740:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_GPIO_Init+0x2dc>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a55      	ldr	r2, [pc, #340]	; (800189c <HAL_GPIO_Init+0x2dc>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_GPIO_Init+0x2dc>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001758:	4a51      	ldr	r2, [pc, #324]	; (80018a0 <HAL_GPIO_Init+0x2e0>)
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a49      	ldr	r2, [pc, #292]	; (80018a4 <HAL_GPIO_Init+0x2e4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d00d      	beq.n	80017a0 <HAL_GPIO_Init+0x1e0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a48      	ldr	r2, [pc, #288]	; (80018a8 <HAL_GPIO_Init+0x2e8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d007      	beq.n	800179c <HAL_GPIO_Init+0x1dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a47      	ldr	r2, [pc, #284]	; (80018ac <HAL_GPIO_Init+0x2ec>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d101      	bne.n	8001798 <HAL_GPIO_Init+0x1d8>
 8001794:	2302      	movs	r3, #2
 8001796:	e004      	b.n	80017a2 <HAL_GPIO_Init+0x1e2>
 8001798:	2303      	movs	r3, #3
 800179a:	e002      	b.n	80017a2 <HAL_GPIO_Init+0x1e2>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_GPIO_Init+0x1e2>
 80017a0:	2300      	movs	r3, #0
 80017a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a4:	f002 0203 	and.w	r2, r2, #3
 80017a8:	0092      	lsls	r2, r2, #2
 80017aa:	4093      	lsls	r3, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b2:	493b      	ldr	r1, [pc, #236]	; (80018a0 <HAL_GPIO_Init+0x2e0>)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4937      	ldr	r1, [pc, #220]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017da:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4933      	ldr	r1, [pc, #204]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	492d      	ldr	r1, [pc, #180]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4929      	ldr	r1, [pc, #164]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 800180c:	4013      	ands	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4923      	ldr	r1, [pc, #140]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	491f      	ldr	r1, [pc, #124]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 8001834:	4013      	ands	r3, r2
 8001836:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4919      	ldr	r1, [pc, #100]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4915      	ldr	r1, [pc, #84]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 800185c:	4013      	ands	r3, r2
 800185e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	3301      	adds	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	f47f aeaf 	bne.w	80015d4 <HAL_GPIO_Init+0x14>
  }
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	372c      	adds	r7, #44	; 0x2c
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	10320000 	.word	0x10320000
 8001888:	10310000 	.word	0x10310000
 800188c:	10220000 	.word	0x10220000
 8001890:	10210000 	.word	0x10210000
 8001894:	10120000 	.word	0x10120000
 8001898:	10110000 	.word	0x10110000
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d0:	e003      	b.n	80018da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	041a      	lsls	r2, r3, #16
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	611a      	str	r2, [r3, #16]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e26c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 8087 	beq.w	8001a12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001904:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b04      	cmp	r3, #4
 800190e:	d00c      	beq.n	800192a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001910:	4b8f      	ldr	r3, [pc, #572]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d112      	bne.n	8001942 <HAL_RCC_OscConfig+0x5e>
 800191c:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d10b      	bne.n	8001942 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192a:	4b89      	ldr	r3, [pc, #548]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d06c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x12c>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d168      	bne.n	8001a10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e246      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x76>
 800194c:	4b80      	ldr	r3, [pc, #512]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a7f      	ldr	r2, [pc, #508]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e02e      	b.n	80019b8 <HAL_RCC_OscConfig+0xd4>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x98>
 8001962:	4b7b      	ldr	r3, [pc, #492]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a7a      	ldr	r2, [pc, #488]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a77      	ldr	r2, [pc, #476]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xd4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0xbc>
 8001986:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a71      	ldr	r2, [pc, #452]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b6f      	ldr	r3, [pc, #444]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6e      	ldr	r2, [pc, #440]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xd4>
 80019a0:	4b6b      	ldr	r3, [pc, #428]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a6a      	ldr	r2, [pc, #424]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a67      	ldr	r2, [pc, #412]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff f910 	bl	8000be4 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff f90c 	bl	8000be4 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1fa      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xe4>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff f8fc 	bl	8000be4 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff f8f8 	bl	8000be4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1e6      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x10c>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d063      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1e:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d11c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x18c>
 8001a36:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x176>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1ba      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4939      	ldr	r1, [pc, #228]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	e03a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f8b1 	bl	8000be4 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff f8ad 	bl	8000be4 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e19b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4927      	ldr	r1, [pc, #156]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f890 	bl	8000be4 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f88c 	bl	8000be4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e17a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d03a      	beq.n	8001b68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d019      	beq.n	8001b2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_RCC_OscConfig+0x274>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7ff f870 	bl	8000be4 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff f86c 	bl	8000be4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e15a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f000 fad8 	bl	80020dc <RCC_Delay>
 8001b2c:	e01c      	b.n	8001b68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_RCC_OscConfig+0x274>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7ff f856 	bl	8000be4 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3a:	e00f      	b.n	8001b5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f852 	bl	8000be4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d908      	bls.n	8001b5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e140      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	42420000 	.word	0x42420000
 8001b58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5c:	4b9e      	ldr	r3, [pc, #632]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1e9      	bne.n	8001b3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80a6 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7a:	4b97      	ldr	r3, [pc, #604]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10d      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	4b94      	ldr	r3, [pc, #592]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a93      	ldr	r2, [pc, #588]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b91      	ldr	r3, [pc, #580]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba2:	4b8e      	ldr	r3, [pc, #568]	; (8001ddc <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d118      	bne.n	8001be0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bae:	4b8b      	ldr	r3, [pc, #556]	; (8001ddc <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a8a      	ldr	r2, [pc, #552]	; (8001ddc <HAL_RCC_OscConfig+0x4f8>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bba:	f7ff f813 	bl	8000be4 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc2:	f7ff f80f 	bl	8000be4 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b64      	cmp	r3, #100	; 0x64
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0fd      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	4b81      	ldr	r3, [pc, #516]	; (8001ddc <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x312>
 8001be8:	4b7b      	ldr	r3, [pc, #492]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a7a      	ldr	r2, [pc, #488]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	e02d      	b.n	8001c52 <HAL_RCC_OscConfig+0x36e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x334>
 8001bfe:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a75      	ldr	r2, [pc, #468]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6213      	str	r3, [r2, #32]
 8001c0a:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a72      	ldr	r2, [pc, #456]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	f023 0304 	bic.w	r3, r3, #4
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	e01c      	b.n	8001c52 <HAL_RCC_OscConfig+0x36e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d10c      	bne.n	8001c3a <HAL_RCC_OscConfig+0x356>
 8001c20:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4a6c      	ldr	r2, [pc, #432]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6213      	str	r3, [r2, #32]
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a69      	ldr	r2, [pc, #420]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	e00b      	b.n	8001c52 <HAL_RCC_OscConfig+0x36e>
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a66      	ldr	r2, [pc, #408]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	4b64      	ldr	r3, [pc, #400]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	4a63      	ldr	r2, [pc, #396]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f023 0304 	bic.w	r3, r3, #4
 8001c50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d015      	beq.n	8001c86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5a:	f7fe ffc3 	bl	8000be4 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7fe ffbf 	bl	8000be4 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0ab      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c78:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ee      	beq.n	8001c62 <HAL_RCC_OscConfig+0x37e>
 8001c84:	e014      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7fe ffad 	bl	8000be4 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7fe ffa9 	bl	8000be4 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e095      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca4:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1ee      	bne.n	8001c8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d105      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb6:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a47      	ldr	r2, [pc, #284]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8081 	beq.w	8001dce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ccc:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d061      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d146      	bne.n	8001d6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_OscConfig+0x4fc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe ff7d 	bl	8000be4 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe ff79 	bl	8000be4 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e067      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d108      	bne.n	8001d28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d16:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	492d      	ldr	r1, [pc, #180]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a19      	ldr	r1, [r3, #32]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	4927      	ldr	r1, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x4fc>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7fe ff4d 	bl	8000be4 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7fe ff49 	bl	8000be4 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e037      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x46a>
 8001d6c:	e02f      	b.n	8001dce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_RCC_OscConfig+0x4fc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7fe ff36 	bl	8000be4 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe ff32 	bl	8000be4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e020      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x498>
 8001d9a:	e018      	b.n	8001dce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e013      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	42420060 	.word	0x42420060

08001de4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d0      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4965      	ldr	r1, [pc, #404]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0b8      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	494d      	ldr	r1, [pc, #308]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d040      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e07f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e073      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e06b      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4936      	ldr	r1, [pc, #216]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed4:	f7fe fe86 	bl	8000be4 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7fe fe82 	bl	8000be4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e053      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 020c 	and.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1eb      	bne.n	8001edc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d210      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 0207 	bic.w	r2, r3, #7
 8001f1a:	4922      	ldr	r1, [pc, #136]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e032      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f72:	f000 f821 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	490a      	ldr	r1, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001f84:	5ccb      	ldrb	r3, [r1, r3]
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fde4 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08003de4 	.word	0x08003de4
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b490      	push	{r4, r7}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fc0:	1d3c      	adds	r4, r7, #4
 8001fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc8:	f240 2301 	movw	r3, #513	; 0x201
 8001fcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x46>
 8001ff6:	e02d      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffa:	623b      	str	r3, [r7, #32]
      break;
 8001ffc:	e02d      	b.n	800205a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	0c9b      	lsrs	r3, r3, #18
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800200a:	4413      	add	r3, r2
 800200c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002010:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_RCC_GetSysClockFreq+0xb4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	0c5b      	lsrs	r3, r3, #17
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800202a:	4413      	add	r3, r2
 800202c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002030:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002036:	fb02 f203 	mul.w	r2, r2, r3
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	e004      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	623b      	str	r3, [r7, #32]
      break;
 8002052:	e002      	b.n	800205a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002056:	623b      	str	r3, [r7, #32]
      break;
 8002058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205a:	6a3b      	ldr	r3, [r7, #32]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bc90      	pop	{r4, r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	08003dd4 	.word	0x08003dd4
 800206c:	40021000 	.word	0x40021000
 8002070:	007a1200 	.word	0x007a1200
 8002074:	003d0900 	.word	0x003d0900

08002078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b02      	ldr	r3, [pc, #8]	; (8002088 <HAL_RCC_GetHCLKFreq+0x10>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002090:	f7ff fff2 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4903      	ldr	r1, [pc, #12]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08003df4 	.word	0x08003df4

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020b8:	f7ff ffde 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	0adb      	lsrs	r3, r3, #11
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08003df4 	.word	0x08003df4

080020dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <RCC_Delay+0x34>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <RCC_Delay+0x38>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0a5b      	lsrs	r3, r3, #9
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020f8:	bf00      	nop
  }
  while (Delay --);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	60fa      	str	r2, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f9      	bne.n	80020f8 <RCC_Delay+0x1c>
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000000 	.word	0x20000000
 8002114:	10624dd3 	.word	0x10624dd3

08002118 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d07d      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002138:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10d      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	61d3      	str	r3, [r2, #28]
 8002150:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d118      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216c:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a42      	ldr	r2, [pc, #264]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002178:	f7fe fd34 	bl	8000be4 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	e008      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002180:	f7fe fd30 	bl	8000be4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e06d      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b3a      	ldr	r3, [pc, #232]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800219e:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d02e      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d027      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c6:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021d2:	4a29      	ldr	r2, [pc, #164]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d014      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe fcff 	bl	8000be4 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7fe fcfb 	bl	8000be4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e036      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ee      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4917      	ldr	r1, [pc, #92]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221a:	4313      	orrs	r3, r2
 800221c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	4a13      	ldr	r2, [pc, #76]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	490b      	ldr	r1, [pc, #44]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	40007000 	.word	0x40007000
 8002280:	42420440 	.word	0x42420440

08002284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e041      	b.n	800231a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fa8c 	bl	80007c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3304      	adds	r3, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f000 fa6a 	bl	800279c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d001      	beq.n	800233c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e035      	b.n	80023a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <HAL_TIM_Base_Start_IT+0x90>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_TIM_Base_Start_IT+0x4e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002366:	d004      	beq.n	8002372 <HAL_TIM_Base_Start_IT+0x4e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <HAL_TIM_Base_Start_IT+0x94>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d111      	bne.n	8002396 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b06      	cmp	r3, #6
 8002382:	d010      	beq.n	80023a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002394:	e007      	b.n	80023a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400

080023bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d122      	bne.n	8002418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0202 	mvn.w	r2, #2
 80023e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f9b1 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 8002404:	e005      	b.n	8002412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f9a4 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f9b3 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d122      	bne.n	800246c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b04      	cmp	r3, #4
 8002432:	d11b      	bne.n	800246c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0204 	mvn.w	r2, #4
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f987 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f97a 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f989 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d122      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b08      	cmp	r3, #8
 8002486:	d11b      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0208 	mvn.w	r2, #8
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f95d 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f950 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f95f 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d122      	bne.n	8002514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d11b      	bne.n	8002514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0210 	mvn.w	r2, #16
 80024e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2208      	movs	r2, #8
 80024ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f933 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f926 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f935 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0201 	mvn.w	r2, #1
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe f830 	bl	80005a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d10e      	bne.n	800256c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d107      	bne.n	800256c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa67 	bl	8002a3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f8f9 	bl	800278a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0220 	mvn.w	r2, #32
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa32 	bl	8002a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_TIM_ConfigClockSource+0x18>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e0b3      	b.n	800274c <HAL_TIM_ConfigClockSource+0x180>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002602:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800260a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261c:	d03e      	beq.n	800269c <HAL_TIM_ConfigClockSource+0xd0>
 800261e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002622:	f200 8087 	bhi.w	8002734 <HAL_TIM_ConfigClockSource+0x168>
 8002626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262a:	f000 8085 	beq.w	8002738 <HAL_TIM_ConfigClockSource+0x16c>
 800262e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002632:	d87f      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x168>
 8002634:	2b70      	cmp	r3, #112	; 0x70
 8002636:	d01a      	beq.n	800266e <HAL_TIM_ConfigClockSource+0xa2>
 8002638:	2b70      	cmp	r3, #112	; 0x70
 800263a:	d87b      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x168>
 800263c:	2b60      	cmp	r3, #96	; 0x60
 800263e:	d050      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x116>
 8002640:	2b60      	cmp	r3, #96	; 0x60
 8002642:	d877      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x168>
 8002644:	2b50      	cmp	r3, #80	; 0x50
 8002646:	d03c      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0xf6>
 8002648:	2b50      	cmp	r3, #80	; 0x50
 800264a:	d873      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x168>
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d058      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x136>
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d86f      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x168>
 8002654:	2b30      	cmp	r3, #48	; 0x30
 8002656:	d064      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x156>
 8002658:	2b30      	cmp	r3, #48	; 0x30
 800265a:	d86b      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x168>
 800265c:	2b20      	cmp	r3, #32
 800265e:	d060      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x156>
 8002660:	2b20      	cmp	r3, #32
 8002662:	d867      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x168>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05c      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x156>
 8002668:	2b10      	cmp	r3, #16
 800266a:	d05a      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800266c:	e062      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6899      	ldr	r1, [r3, #8]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f000 f95c 	bl	800293a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002690:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	609a      	str	r2, [r3, #8]
      break;
 800269a:	e04e      	b.n	800273a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6899      	ldr	r1, [r3, #8]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f000 f945 	bl	800293a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026be:	609a      	str	r2, [r3, #8]
      break;
 80026c0:	e03b      	b.n	800273a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f000 f8bc 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2150      	movs	r1, #80	; 0x50
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f913 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e02b      	b.n	800273a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f8da 	bl	80028a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2160      	movs	r1, #96	; 0x60
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f903 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002700:	e01b      	b.n	800273a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	461a      	mov	r2, r3
 8002710:	f000 f89c 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2140      	movs	r1, #64	; 0x40
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f8f3 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002720:	e00b      	b.n	800273a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f000 f8ea 	bl	8002906 <TIM_ITRx_SetConfig>
        break;
 8002732:	e002      	b.n	800273a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002738:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a25      	ldr	r2, [pc, #148]	; (8002844 <TIM_Base_SetConfig+0xa8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d007      	beq.n	80027c4 <TIM_Base_SetConfig+0x28>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d003      	beq.n	80027c4 <TIM_Base_SetConfig+0x28>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a22      	ldr	r2, [pc, #136]	; (8002848 <TIM_Base_SetConfig+0xac>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d108      	bne.n	80027d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <TIM_Base_SetConfig+0xa8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <TIM_Base_SetConfig+0x52>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e4:	d003      	beq.n	80027ee <TIM_Base_SetConfig+0x52>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a17      	ldr	r2, [pc, #92]	; (8002848 <TIM_Base_SetConfig+0xac>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d108      	bne.n	8002800 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a07      	ldr	r2, [pc, #28]	; (8002844 <TIM_Base_SetConfig+0xa8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d103      	bne.n	8002834 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	615a      	str	r2, [r3, #20]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40000400 	.word	0x40000400

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f023 0210 	bic.w	r2, r3, #16
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	031b      	lsls	r3, r3, #12
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800298c:	2302      	movs	r3, #2
 800298e:	e041      	b.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d004      	beq.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10c      	bne.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40000400 	.word	0x40000400

08002a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e03f      	b.n	8002ade <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fd fecc 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fc85 	bl	80033a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b08a      	sub	sp, #40	; 0x28
 8002aea:	af02      	add	r7, sp, #8
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d17c      	bne.n	8002c00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_UART_Transmit+0x2c>
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e075      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_UART_Transmit+0x3e>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e06e      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2221      	movs	r2, #33	; 0x21
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3a:	f7fe f853 	bl	8000be4 <HAL_GetTick>
 8002b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	88fa      	ldrh	r2, [r7, #6]
 8002b4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	d108      	bne.n	8002b68 <HAL_UART_Transmit+0x82>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	e003      	b.n	8002b70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b78:	e02a      	b.n	8002bd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fa38 	bl	8002ffa <UART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e036      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10b      	bne.n	8002bb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	3302      	adds	r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	e007      	b.n	8002bc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1cf      	bne.n	8002b7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2140      	movs	r1, #64	; 0x40
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fa08 	bl	8002ffa <UART_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e006      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d11d      	bne.n	8002c60 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_UART_Receive_IT+0x26>
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e016      	b.n	8002c62 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Receive_IT+0x38>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e00f      	b.n	8002c62 <HAL_UART_Receive_IT+0x58>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fa19 	bl	800308e <UART_Start_Receive_IT>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	e000      	b.n	8002c62 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	; 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_UART_IRQHandler+0x52>
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fac9 	bl	800324e <UART_Receive_IT>
      return;
 8002cbc:	e17b      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80b1 	beq.w	8002e28 <HAL_UART_IRQHandler+0x1bc>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_UART_IRQHandler+0x70>
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a6 	beq.w	8002e28 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_UART_IRQHandler+0x90>
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_UART_IRQHandler+0xb0>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f043 0202 	orr.w	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_UART_IRQHandler+0xd0>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00f      	beq.n	8002d66 <HAL_UART_IRQHandler+0xfa>
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <HAL_UART_IRQHandler+0xee>
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f043 0208 	orr.w	r2, r3, #8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 811e 	beq.w	8002fac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <HAL_UART_IRQHandler+0x11e>
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa62 	bl	800324e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <HAL_UART_IRQHandler+0x146>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d031      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f9a4 	bl	8003100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d023      	beq.n	8002e0e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d013      	beq.n	8002e06 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	4a76      	ldr	r2, [pc, #472]	; (8002fbc <HAL_UART_IRQHandler+0x350>)
 8002de4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fb72 	bl	80014d4 <HAL_DMA_Abort_IT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e00:	4610      	mov	r0, r2
 8002e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e00e      	b.n	8002e24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8e3 	bl	8002fd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	e00a      	b.n	8002e24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8df 	bl	8002fd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	e006      	b.n	8002e24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8db 	bl	8002fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e22:	e0c3      	b.n	8002fac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	bf00      	nop
    return;
 8002e26:	e0c1      	b.n	8002fac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	f040 80a1 	bne.w	8002f74 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 809b 	beq.w	8002f74 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8095 	beq.w	8002f74 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d04e      	beq.n	8002f0c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002e78:	8a3b      	ldrh	r3, [r7, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8098 	beq.w	8002fb0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e84:	8a3a      	ldrh	r2, [r7, #16]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	f080 8092 	bcs.w	8002fb0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8a3a      	ldrh	r2, [r7, #16]
 8002e90:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d02b      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eaa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0210 	bic.w	r2, r2, #16
 8002ee8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fab5 	bl	800145e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f86d 	bl	8002fe4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f0a:	e051      	b.n	8002fb0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d047      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002f24:	8a7b      	ldrh	r3, [r7, #18]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d044      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f38:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0210 	bic.w	r2, r2, #16
 8002f66:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f68:	8a7b      	ldrh	r3, [r7, #18]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f839 	bl	8002fe4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f72:	e01f      	b.n	8002fb4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_UART_IRQHandler+0x324>
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f8f9 	bl	8003180 <UART_Transmit_IT>
    return;
 8002f8e:	e012      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f93a 	bl	800321e <UART_EndTransmit_IT>
    return;
 8002faa:	e004      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002fac:	bf00      	nop
 8002fae:	e002      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fb4:	bf00      	nop
  }
}
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	08003159 	.word	0x08003159

08002fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	4613      	mov	r3, r2
 8003008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300a:	e02c      	b.n	8003066 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d028      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <UART_WaitOnFlagUntilTimeout+0x30>
 800301a:	f7fd fde3 	bl	8000be4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	429a      	cmp	r2, r3
 8003028:	d21d      	bcs.n	8003066 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003038:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e00f      	b.n	8003086 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	429a      	cmp	r2, r3
 8003082:	d0c3      	beq.n	800300c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	4613      	mov	r3, r2
 800309a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2222      	movs	r2, #34	; 0x22
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0220 	orr.w	r2, r2, #32
 80030f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003116:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	2b01      	cmp	r3, #1
 800312e:	d107      	bne.n	8003140 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0210 	bic.w	r2, r2, #16
 800313e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff ff2d 	bl	8002fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b21      	cmp	r3, #33	; 0x21
 8003192:	d13e      	bne.n	8003212 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319c:	d114      	bne.n	80031c8 <UART_Transmit_IT+0x48>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d110      	bne.n	80031c8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	1c9a      	adds	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]
 80031c6:	e008      	b.n	80031da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	1c59      	adds	r1, r3, #1
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6211      	str	r1, [r2, #32]
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4619      	mov	r1, r3
 80031e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800320c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003234:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff febe 	bl	8002fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b086      	sub	sp, #24
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b22      	cmp	r3, #34	; 0x22
 8003260:	f040 8099 	bne.w	8003396 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326c:	d117      	bne.n	800329e <UART_Receive_IT+0x50>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d113      	bne.n	800329e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328c:	b29a      	uxth	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	1c9a      	adds	r2, r3, #2
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
 800329c:	e026      	b.n	80032ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	d007      	beq.n	80032c2 <UART_Receive_IT+0x74>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <UART_Receive_IT+0x82>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e008      	b.n	80032e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4619      	mov	r1, r3
 80032fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d148      	bne.n	8003392 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0220 	bic.w	r2, r2, #32
 800330e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800331e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	2b01      	cmp	r3, #1
 800333e:	d123      	bne.n	8003388 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0210 	bic.w	r2, r2, #16
 8003354:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b10      	cmp	r3, #16
 8003362:	d10a      	bne.n	800337a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800337e:	4619      	mov	r1, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fe2f 	bl	8002fe4 <HAL_UARTEx_RxEventCallback>
 8003386:	e002      	b.n	800338e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fc ff4d 	bl	8000228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e002      	b.n	8003398 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033da:	f023 030c 	bic.w	r3, r3, #12
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	430b      	orrs	r3, r1
 80033e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <UART_SetConfig+0x114>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d103      	bne.n	8003410 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003408:	f7fe fe54 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	e002      	b.n	8003416 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003410:	f7fe fe3c 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8003414:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	009a      	lsls	r2, r3, #2
 8003420:	441a      	add	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <UART_SetConfig+0x118>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	0119      	lsls	r1, r3, #4
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009a      	lsls	r2, r3, #2
 8003440:	441a      	add	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	fbb2 f2f3 	udiv	r2, r2, r3
 800344c:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <UART_SetConfig+0x118>)
 800344e:	fba3 0302 	umull	r0, r3, r3, r2
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2064      	movs	r0, #100	; 0x64
 8003456:	fb00 f303 	mul.w	r3, r0, r3
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	3332      	adds	r3, #50	; 0x32
 8003460:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <UART_SetConfig+0x118>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346c:	4419      	add	r1, r3
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009a      	lsls	r2, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fbb2 f2f3 	udiv	r2, r2, r3
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <UART_SetConfig+0x118>)
 8003486:	fba3 0302 	umull	r0, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2064      	movs	r0, #100	; 0x64
 800348e:	fb00 f303 	mul.w	r3, r0, r3
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	3332      	adds	r3, #50	; 0x32
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <UART_SetConfig+0x118>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	440a      	add	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40013800 	.word	0x40013800
 80034b8:	51eb851f 	.word	0x51eb851f

080034bc <__errno>:
 80034bc:	4b01      	ldr	r3, [pc, #4]	; (80034c4 <__errno+0x8>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	2000000c 	.word	0x2000000c

080034c8 <__libc_init_array>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	2600      	movs	r6, #0
 80034cc:	4d0c      	ldr	r5, [pc, #48]	; (8003500 <__libc_init_array+0x38>)
 80034ce:	4c0d      	ldr	r4, [pc, #52]	; (8003504 <__libc_init_array+0x3c>)
 80034d0:	1b64      	subs	r4, r4, r5
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	42a6      	cmp	r6, r4
 80034d6:	d109      	bne.n	80034ec <__libc_init_array+0x24>
 80034d8:	f000 fc64 	bl	8003da4 <_init>
 80034dc:	2600      	movs	r6, #0
 80034de:	4d0a      	ldr	r5, [pc, #40]	; (8003508 <__libc_init_array+0x40>)
 80034e0:	4c0a      	ldr	r4, [pc, #40]	; (800350c <__libc_init_array+0x44>)
 80034e2:	1b64      	subs	r4, r4, r5
 80034e4:	10a4      	asrs	r4, r4, #2
 80034e6:	42a6      	cmp	r6, r4
 80034e8:	d105      	bne.n	80034f6 <__libc_init_array+0x2e>
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f0:	4798      	blx	r3
 80034f2:	3601      	adds	r6, #1
 80034f4:	e7ee      	b.n	80034d4 <__libc_init_array+0xc>
 80034f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fa:	4798      	blx	r3
 80034fc:	3601      	adds	r6, #1
 80034fe:	e7f2      	b.n	80034e6 <__libc_init_array+0x1e>
 8003500:	08003e30 	.word	0x08003e30
 8003504:	08003e30 	.word	0x08003e30
 8003508:	08003e30 	.word	0x08003e30
 800350c:	08003e34 	.word	0x08003e34

08003510 <memset>:
 8003510:	4603      	mov	r3, r0
 8003512:	4402      	add	r2, r0
 8003514:	4293      	cmp	r3, r2
 8003516:	d100      	bne.n	800351a <memset+0xa>
 8003518:	4770      	bx	lr
 800351a:	f803 1b01 	strb.w	r1, [r3], #1
 800351e:	e7f9      	b.n	8003514 <memset+0x4>

08003520 <siprintf>:
 8003520:	b40e      	push	{r1, r2, r3}
 8003522:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003526:	b500      	push	{lr}
 8003528:	b09c      	sub	sp, #112	; 0x70
 800352a:	ab1d      	add	r3, sp, #116	; 0x74
 800352c:	9002      	str	r0, [sp, #8]
 800352e:	9006      	str	r0, [sp, #24]
 8003530:	9107      	str	r1, [sp, #28]
 8003532:	9104      	str	r1, [sp, #16]
 8003534:	4808      	ldr	r0, [pc, #32]	; (8003558 <siprintf+0x38>)
 8003536:	4909      	ldr	r1, [pc, #36]	; (800355c <siprintf+0x3c>)
 8003538:	f853 2b04 	ldr.w	r2, [r3], #4
 800353c:	9105      	str	r1, [sp, #20]
 800353e:	6800      	ldr	r0, [r0, #0]
 8003540:	a902      	add	r1, sp, #8
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	f000 f870 	bl	8003628 <_svfiprintf_r>
 8003548:	2200      	movs	r2, #0
 800354a:	9b02      	ldr	r3, [sp, #8]
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	b01c      	add	sp, #112	; 0x70
 8003550:	f85d eb04 	ldr.w	lr, [sp], #4
 8003554:	b003      	add	sp, #12
 8003556:	4770      	bx	lr
 8003558:	2000000c 	.word	0x2000000c
 800355c:	ffff0208 	.word	0xffff0208

08003560 <strcpy>:
 8003560:	4603      	mov	r3, r0
 8003562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003566:	f803 2b01 	strb.w	r2, [r3], #1
 800356a:	2a00      	cmp	r2, #0
 800356c:	d1f9      	bne.n	8003562 <strcpy+0x2>
 800356e:	4770      	bx	lr

08003570 <__ssputs_r>:
 8003570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003574:	688e      	ldr	r6, [r1, #8]
 8003576:	4682      	mov	sl, r0
 8003578:	429e      	cmp	r6, r3
 800357a:	460c      	mov	r4, r1
 800357c:	4690      	mov	r8, r2
 800357e:	461f      	mov	r7, r3
 8003580:	d838      	bhi.n	80035f4 <__ssputs_r+0x84>
 8003582:	898a      	ldrh	r2, [r1, #12]
 8003584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003588:	d032      	beq.n	80035f0 <__ssputs_r+0x80>
 800358a:	6825      	ldr	r5, [r4, #0]
 800358c:	6909      	ldr	r1, [r1, #16]
 800358e:	3301      	adds	r3, #1
 8003590:	eba5 0901 	sub.w	r9, r5, r1
 8003594:	6965      	ldr	r5, [r4, #20]
 8003596:	444b      	add	r3, r9
 8003598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800359c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035a0:	106d      	asrs	r5, r5, #1
 80035a2:	429d      	cmp	r5, r3
 80035a4:	bf38      	it	cc
 80035a6:	461d      	movcc	r5, r3
 80035a8:	0553      	lsls	r3, r2, #21
 80035aa:	d531      	bpl.n	8003610 <__ssputs_r+0xa0>
 80035ac:	4629      	mov	r1, r5
 80035ae:	f000 fb53 	bl	8003c58 <_malloc_r>
 80035b2:	4606      	mov	r6, r0
 80035b4:	b950      	cbnz	r0, 80035cc <__ssputs_r+0x5c>
 80035b6:	230c      	movs	r3, #12
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f8ca 3000 	str.w	r3, [sl]
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c6:	81a3      	strh	r3, [r4, #12]
 80035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035cc:	464a      	mov	r2, r9
 80035ce:	6921      	ldr	r1, [r4, #16]
 80035d0:	f000 face 	bl	8003b70 <memcpy>
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035de:	81a3      	strh	r3, [r4, #12]
 80035e0:	6126      	str	r6, [r4, #16]
 80035e2:	444e      	add	r6, r9
 80035e4:	6026      	str	r6, [r4, #0]
 80035e6:	463e      	mov	r6, r7
 80035e8:	6165      	str	r5, [r4, #20]
 80035ea:	eba5 0509 	sub.w	r5, r5, r9
 80035ee:	60a5      	str	r5, [r4, #8]
 80035f0:	42be      	cmp	r6, r7
 80035f2:	d900      	bls.n	80035f6 <__ssputs_r+0x86>
 80035f4:	463e      	mov	r6, r7
 80035f6:	4632      	mov	r2, r6
 80035f8:	4641      	mov	r1, r8
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	f000 fac6 	bl	8003b8c <memmove>
 8003600:	68a3      	ldr	r3, [r4, #8]
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	1b9b      	subs	r3, r3, r6
 8003606:	4432      	add	r2, r6
 8003608:	2000      	movs	r0, #0
 800360a:	60a3      	str	r3, [r4, #8]
 800360c:	6022      	str	r2, [r4, #0]
 800360e:	e7db      	b.n	80035c8 <__ssputs_r+0x58>
 8003610:	462a      	mov	r2, r5
 8003612:	f000 fb7b 	bl	8003d0c <_realloc_r>
 8003616:	4606      	mov	r6, r0
 8003618:	2800      	cmp	r0, #0
 800361a:	d1e1      	bne.n	80035e0 <__ssputs_r+0x70>
 800361c:	4650      	mov	r0, sl
 800361e:	6921      	ldr	r1, [r4, #16]
 8003620:	f000 face 	bl	8003bc0 <_free_r>
 8003624:	e7c7      	b.n	80035b6 <__ssputs_r+0x46>
	...

08003628 <_svfiprintf_r>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	4698      	mov	r8, r3
 800362e:	898b      	ldrh	r3, [r1, #12]
 8003630:	4607      	mov	r7, r0
 8003632:	061b      	lsls	r3, r3, #24
 8003634:	460d      	mov	r5, r1
 8003636:	4614      	mov	r4, r2
 8003638:	b09d      	sub	sp, #116	; 0x74
 800363a:	d50e      	bpl.n	800365a <_svfiprintf_r+0x32>
 800363c:	690b      	ldr	r3, [r1, #16]
 800363e:	b963      	cbnz	r3, 800365a <_svfiprintf_r+0x32>
 8003640:	2140      	movs	r1, #64	; 0x40
 8003642:	f000 fb09 	bl	8003c58 <_malloc_r>
 8003646:	6028      	str	r0, [r5, #0]
 8003648:	6128      	str	r0, [r5, #16]
 800364a:	b920      	cbnz	r0, 8003656 <_svfiprintf_r+0x2e>
 800364c:	230c      	movs	r3, #12
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	e0d1      	b.n	80037fa <_svfiprintf_r+0x1d2>
 8003656:	2340      	movs	r3, #64	; 0x40
 8003658:	616b      	str	r3, [r5, #20]
 800365a:	2300      	movs	r3, #0
 800365c:	9309      	str	r3, [sp, #36]	; 0x24
 800365e:	2320      	movs	r3, #32
 8003660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003664:	2330      	movs	r3, #48	; 0x30
 8003666:	f04f 0901 	mov.w	r9, #1
 800366a:	f8cd 800c 	str.w	r8, [sp, #12]
 800366e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003814 <_svfiprintf_r+0x1ec>
 8003672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003676:	4623      	mov	r3, r4
 8003678:	469a      	mov	sl, r3
 800367a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800367e:	b10a      	cbz	r2, 8003684 <_svfiprintf_r+0x5c>
 8003680:	2a25      	cmp	r2, #37	; 0x25
 8003682:	d1f9      	bne.n	8003678 <_svfiprintf_r+0x50>
 8003684:	ebba 0b04 	subs.w	fp, sl, r4
 8003688:	d00b      	beq.n	80036a2 <_svfiprintf_r+0x7a>
 800368a:	465b      	mov	r3, fp
 800368c:	4622      	mov	r2, r4
 800368e:	4629      	mov	r1, r5
 8003690:	4638      	mov	r0, r7
 8003692:	f7ff ff6d 	bl	8003570 <__ssputs_r>
 8003696:	3001      	adds	r0, #1
 8003698:	f000 80aa 	beq.w	80037f0 <_svfiprintf_r+0x1c8>
 800369c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800369e:	445a      	add	r2, fp
 80036a0:	9209      	str	r2, [sp, #36]	; 0x24
 80036a2:	f89a 3000 	ldrb.w	r3, [sl]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a2 	beq.w	80037f0 <_svfiprintf_r+0x1c8>
 80036ac:	2300      	movs	r3, #0
 80036ae:	f04f 32ff 	mov.w	r2, #4294967295
 80036b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036b6:	f10a 0a01 	add.w	sl, sl, #1
 80036ba:	9304      	str	r3, [sp, #16]
 80036bc:	9307      	str	r3, [sp, #28]
 80036be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036c2:	931a      	str	r3, [sp, #104]	; 0x68
 80036c4:	4654      	mov	r4, sl
 80036c6:	2205      	movs	r2, #5
 80036c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036cc:	4851      	ldr	r0, [pc, #324]	; (8003814 <_svfiprintf_r+0x1ec>)
 80036ce:	f000 fa41 	bl	8003b54 <memchr>
 80036d2:	9a04      	ldr	r2, [sp, #16]
 80036d4:	b9d8      	cbnz	r0, 800370e <_svfiprintf_r+0xe6>
 80036d6:	06d0      	lsls	r0, r2, #27
 80036d8:	bf44      	itt	mi
 80036da:	2320      	movmi	r3, #32
 80036dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036e0:	0711      	lsls	r1, r2, #28
 80036e2:	bf44      	itt	mi
 80036e4:	232b      	movmi	r3, #43	; 0x2b
 80036e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ea:	f89a 3000 	ldrb.w	r3, [sl]
 80036ee:	2b2a      	cmp	r3, #42	; 0x2a
 80036f0:	d015      	beq.n	800371e <_svfiprintf_r+0xf6>
 80036f2:	4654      	mov	r4, sl
 80036f4:	2000      	movs	r0, #0
 80036f6:	f04f 0c0a 	mov.w	ip, #10
 80036fa:	9a07      	ldr	r2, [sp, #28]
 80036fc:	4621      	mov	r1, r4
 80036fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003702:	3b30      	subs	r3, #48	; 0x30
 8003704:	2b09      	cmp	r3, #9
 8003706:	d94e      	bls.n	80037a6 <_svfiprintf_r+0x17e>
 8003708:	b1b0      	cbz	r0, 8003738 <_svfiprintf_r+0x110>
 800370a:	9207      	str	r2, [sp, #28]
 800370c:	e014      	b.n	8003738 <_svfiprintf_r+0x110>
 800370e:	eba0 0308 	sub.w	r3, r0, r8
 8003712:	fa09 f303 	lsl.w	r3, r9, r3
 8003716:	4313      	orrs	r3, r2
 8003718:	46a2      	mov	sl, r4
 800371a:	9304      	str	r3, [sp, #16]
 800371c:	e7d2      	b.n	80036c4 <_svfiprintf_r+0x9c>
 800371e:	9b03      	ldr	r3, [sp, #12]
 8003720:	1d19      	adds	r1, r3, #4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	9103      	str	r1, [sp, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	bfbb      	ittet	lt
 800372a:	425b      	neglt	r3, r3
 800372c:	f042 0202 	orrlt.w	r2, r2, #2
 8003730:	9307      	strge	r3, [sp, #28]
 8003732:	9307      	strlt	r3, [sp, #28]
 8003734:	bfb8      	it	lt
 8003736:	9204      	strlt	r2, [sp, #16]
 8003738:	7823      	ldrb	r3, [r4, #0]
 800373a:	2b2e      	cmp	r3, #46	; 0x2e
 800373c:	d10c      	bne.n	8003758 <_svfiprintf_r+0x130>
 800373e:	7863      	ldrb	r3, [r4, #1]
 8003740:	2b2a      	cmp	r3, #42	; 0x2a
 8003742:	d135      	bne.n	80037b0 <_svfiprintf_r+0x188>
 8003744:	9b03      	ldr	r3, [sp, #12]
 8003746:	3402      	adds	r4, #2
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	9203      	str	r2, [sp, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	bfb8      	it	lt
 8003752:	f04f 33ff 	movlt.w	r3, #4294967295
 8003756:	9305      	str	r3, [sp, #20]
 8003758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003824 <_svfiprintf_r+0x1fc>
 800375c:	2203      	movs	r2, #3
 800375e:	4650      	mov	r0, sl
 8003760:	7821      	ldrb	r1, [r4, #0]
 8003762:	f000 f9f7 	bl	8003b54 <memchr>
 8003766:	b140      	cbz	r0, 800377a <_svfiprintf_r+0x152>
 8003768:	2340      	movs	r3, #64	; 0x40
 800376a:	eba0 000a 	sub.w	r0, r0, sl
 800376e:	fa03 f000 	lsl.w	r0, r3, r0
 8003772:	9b04      	ldr	r3, [sp, #16]
 8003774:	3401      	adds	r4, #1
 8003776:	4303      	orrs	r3, r0
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800377e:	2206      	movs	r2, #6
 8003780:	4825      	ldr	r0, [pc, #148]	; (8003818 <_svfiprintf_r+0x1f0>)
 8003782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003786:	f000 f9e5 	bl	8003b54 <memchr>
 800378a:	2800      	cmp	r0, #0
 800378c:	d038      	beq.n	8003800 <_svfiprintf_r+0x1d8>
 800378e:	4b23      	ldr	r3, [pc, #140]	; (800381c <_svfiprintf_r+0x1f4>)
 8003790:	bb1b      	cbnz	r3, 80037da <_svfiprintf_r+0x1b2>
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	3307      	adds	r3, #7
 8003796:	f023 0307 	bic.w	r3, r3, #7
 800379a:	3308      	adds	r3, #8
 800379c:	9303      	str	r3, [sp, #12]
 800379e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037a0:	4433      	add	r3, r6
 80037a2:	9309      	str	r3, [sp, #36]	; 0x24
 80037a4:	e767      	b.n	8003676 <_svfiprintf_r+0x4e>
 80037a6:	460c      	mov	r4, r1
 80037a8:	2001      	movs	r0, #1
 80037aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ae:	e7a5      	b.n	80036fc <_svfiprintf_r+0xd4>
 80037b0:	2300      	movs	r3, #0
 80037b2:	f04f 0c0a 	mov.w	ip, #10
 80037b6:	4619      	mov	r1, r3
 80037b8:	3401      	adds	r4, #1
 80037ba:	9305      	str	r3, [sp, #20]
 80037bc:	4620      	mov	r0, r4
 80037be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c2:	3a30      	subs	r2, #48	; 0x30
 80037c4:	2a09      	cmp	r2, #9
 80037c6:	d903      	bls.n	80037d0 <_svfiprintf_r+0x1a8>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0c5      	beq.n	8003758 <_svfiprintf_r+0x130>
 80037cc:	9105      	str	r1, [sp, #20]
 80037ce:	e7c3      	b.n	8003758 <_svfiprintf_r+0x130>
 80037d0:	4604      	mov	r4, r0
 80037d2:	2301      	movs	r3, #1
 80037d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037d8:	e7f0      	b.n	80037bc <_svfiprintf_r+0x194>
 80037da:	ab03      	add	r3, sp, #12
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	462a      	mov	r2, r5
 80037e0:	4638      	mov	r0, r7
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <_svfiprintf_r+0x1f8>)
 80037e4:	a904      	add	r1, sp, #16
 80037e6:	f3af 8000 	nop.w
 80037ea:	1c42      	adds	r2, r0, #1
 80037ec:	4606      	mov	r6, r0
 80037ee:	d1d6      	bne.n	800379e <_svfiprintf_r+0x176>
 80037f0:	89ab      	ldrh	r3, [r5, #12]
 80037f2:	065b      	lsls	r3, r3, #25
 80037f4:	f53f af2c 	bmi.w	8003650 <_svfiprintf_r+0x28>
 80037f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037fa:	b01d      	add	sp, #116	; 0x74
 80037fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003800:	ab03      	add	r3, sp, #12
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	462a      	mov	r2, r5
 8003806:	4638      	mov	r0, r7
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <_svfiprintf_r+0x1f8>)
 800380a:	a904      	add	r1, sp, #16
 800380c:	f000 f87c 	bl	8003908 <_printf_i>
 8003810:	e7eb      	b.n	80037ea <_svfiprintf_r+0x1c2>
 8003812:	bf00      	nop
 8003814:	08003dfc 	.word	0x08003dfc
 8003818:	08003e06 	.word	0x08003e06
 800381c:	00000000 	.word	0x00000000
 8003820:	08003571 	.word	0x08003571
 8003824:	08003e02 	.word	0x08003e02

08003828 <_printf_common>:
 8003828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	4616      	mov	r6, r2
 800382e:	4699      	mov	r9, r3
 8003830:	688a      	ldr	r2, [r1, #8]
 8003832:	690b      	ldr	r3, [r1, #16]
 8003834:	4607      	mov	r7, r0
 8003836:	4293      	cmp	r3, r2
 8003838:	bfb8      	it	lt
 800383a:	4613      	movlt	r3, r2
 800383c:	6033      	str	r3, [r6, #0]
 800383e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003842:	460c      	mov	r4, r1
 8003844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003848:	b10a      	cbz	r2, 800384e <_printf_common+0x26>
 800384a:	3301      	adds	r3, #1
 800384c:	6033      	str	r3, [r6, #0]
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	0699      	lsls	r1, r3, #26
 8003852:	bf42      	ittt	mi
 8003854:	6833      	ldrmi	r3, [r6, #0]
 8003856:	3302      	addmi	r3, #2
 8003858:	6033      	strmi	r3, [r6, #0]
 800385a:	6825      	ldr	r5, [r4, #0]
 800385c:	f015 0506 	ands.w	r5, r5, #6
 8003860:	d106      	bne.n	8003870 <_printf_common+0x48>
 8003862:	f104 0a19 	add.w	sl, r4, #25
 8003866:	68e3      	ldr	r3, [r4, #12]
 8003868:	6832      	ldr	r2, [r6, #0]
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	42ab      	cmp	r3, r5
 800386e:	dc28      	bgt.n	80038c2 <_printf_common+0x9a>
 8003870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003874:	1e13      	subs	r3, r2, #0
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	bf18      	it	ne
 800387a:	2301      	movne	r3, #1
 800387c:	0692      	lsls	r2, r2, #26
 800387e:	d42d      	bmi.n	80038dc <_printf_common+0xb4>
 8003880:	4649      	mov	r1, r9
 8003882:	4638      	mov	r0, r7
 8003884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003888:	47c0      	blx	r8
 800388a:	3001      	adds	r0, #1
 800388c:	d020      	beq.n	80038d0 <_printf_common+0xa8>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	68e5      	ldr	r5, [r4, #12]
 8003892:	f003 0306 	and.w	r3, r3, #6
 8003896:	2b04      	cmp	r3, #4
 8003898:	bf18      	it	ne
 800389a:	2500      	movne	r5, #0
 800389c:	6832      	ldr	r2, [r6, #0]
 800389e:	f04f 0600 	mov.w	r6, #0
 80038a2:	68a3      	ldr	r3, [r4, #8]
 80038a4:	bf08      	it	eq
 80038a6:	1aad      	subeq	r5, r5, r2
 80038a8:	6922      	ldr	r2, [r4, #16]
 80038aa:	bf08      	it	eq
 80038ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b0:	4293      	cmp	r3, r2
 80038b2:	bfc4      	itt	gt
 80038b4:	1a9b      	subgt	r3, r3, r2
 80038b6:	18ed      	addgt	r5, r5, r3
 80038b8:	341a      	adds	r4, #26
 80038ba:	42b5      	cmp	r5, r6
 80038bc:	d11a      	bne.n	80038f4 <_printf_common+0xcc>
 80038be:	2000      	movs	r0, #0
 80038c0:	e008      	b.n	80038d4 <_printf_common+0xac>
 80038c2:	2301      	movs	r3, #1
 80038c4:	4652      	mov	r2, sl
 80038c6:	4649      	mov	r1, r9
 80038c8:	4638      	mov	r0, r7
 80038ca:	47c0      	blx	r8
 80038cc:	3001      	adds	r0, #1
 80038ce:	d103      	bne.n	80038d8 <_printf_common+0xb0>
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	3501      	adds	r5, #1
 80038da:	e7c4      	b.n	8003866 <_printf_common+0x3e>
 80038dc:	2030      	movs	r0, #48	; 0x30
 80038de:	18e1      	adds	r1, r4, r3
 80038e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038ea:	4422      	add	r2, r4
 80038ec:	3302      	adds	r3, #2
 80038ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038f2:	e7c5      	b.n	8003880 <_printf_common+0x58>
 80038f4:	2301      	movs	r3, #1
 80038f6:	4622      	mov	r2, r4
 80038f8:	4649      	mov	r1, r9
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c0      	blx	r8
 80038fe:	3001      	adds	r0, #1
 8003900:	d0e6      	beq.n	80038d0 <_printf_common+0xa8>
 8003902:	3601      	adds	r6, #1
 8003904:	e7d9      	b.n	80038ba <_printf_common+0x92>
	...

08003908 <_printf_i>:
 8003908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	460c      	mov	r4, r1
 800390e:	7e27      	ldrb	r7, [r4, #24]
 8003910:	4691      	mov	r9, r2
 8003912:	2f78      	cmp	r7, #120	; 0x78
 8003914:	4680      	mov	r8, r0
 8003916:	469a      	mov	sl, r3
 8003918:	990c      	ldr	r1, [sp, #48]	; 0x30
 800391a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800391e:	d807      	bhi.n	8003930 <_printf_i+0x28>
 8003920:	2f62      	cmp	r7, #98	; 0x62
 8003922:	d80a      	bhi.n	800393a <_printf_i+0x32>
 8003924:	2f00      	cmp	r7, #0
 8003926:	f000 80d9 	beq.w	8003adc <_printf_i+0x1d4>
 800392a:	2f58      	cmp	r7, #88	; 0x58
 800392c:	f000 80a4 	beq.w	8003a78 <_printf_i+0x170>
 8003930:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003938:	e03a      	b.n	80039b0 <_printf_i+0xa8>
 800393a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800393e:	2b15      	cmp	r3, #21
 8003940:	d8f6      	bhi.n	8003930 <_printf_i+0x28>
 8003942:	a001      	add	r0, pc, #4	; (adr r0, 8003948 <_printf_i+0x40>)
 8003944:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003948:	080039a1 	.word	0x080039a1
 800394c:	080039b5 	.word	0x080039b5
 8003950:	08003931 	.word	0x08003931
 8003954:	08003931 	.word	0x08003931
 8003958:	08003931 	.word	0x08003931
 800395c:	08003931 	.word	0x08003931
 8003960:	080039b5 	.word	0x080039b5
 8003964:	08003931 	.word	0x08003931
 8003968:	08003931 	.word	0x08003931
 800396c:	08003931 	.word	0x08003931
 8003970:	08003931 	.word	0x08003931
 8003974:	08003ac3 	.word	0x08003ac3
 8003978:	080039e5 	.word	0x080039e5
 800397c:	08003aa5 	.word	0x08003aa5
 8003980:	08003931 	.word	0x08003931
 8003984:	08003931 	.word	0x08003931
 8003988:	08003ae5 	.word	0x08003ae5
 800398c:	08003931 	.word	0x08003931
 8003990:	080039e5 	.word	0x080039e5
 8003994:	08003931 	.word	0x08003931
 8003998:	08003931 	.word	0x08003931
 800399c:	08003aad 	.word	0x08003aad
 80039a0:	680b      	ldr	r3, [r1, #0]
 80039a2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	600a      	str	r2, [r1, #0]
 80039ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0a4      	b.n	8003afe <_printf_i+0x1f6>
 80039b4:	6825      	ldr	r5, [r4, #0]
 80039b6:	6808      	ldr	r0, [r1, #0]
 80039b8:	062e      	lsls	r6, r5, #24
 80039ba:	f100 0304 	add.w	r3, r0, #4
 80039be:	d50a      	bpl.n	80039d6 <_printf_i+0xce>
 80039c0:	6805      	ldr	r5, [r0, #0]
 80039c2:	600b      	str	r3, [r1, #0]
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	da03      	bge.n	80039d0 <_printf_i+0xc8>
 80039c8:	232d      	movs	r3, #45	; 0x2d
 80039ca:	426d      	negs	r5, r5
 80039cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d0:	230a      	movs	r3, #10
 80039d2:	485e      	ldr	r0, [pc, #376]	; (8003b4c <_printf_i+0x244>)
 80039d4:	e019      	b.n	8003a0a <_printf_i+0x102>
 80039d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039da:	6805      	ldr	r5, [r0, #0]
 80039dc:	600b      	str	r3, [r1, #0]
 80039de:	bf18      	it	ne
 80039e0:	b22d      	sxthne	r5, r5
 80039e2:	e7ef      	b.n	80039c4 <_printf_i+0xbc>
 80039e4:	680b      	ldr	r3, [r1, #0]
 80039e6:	6825      	ldr	r5, [r4, #0]
 80039e8:	1d18      	adds	r0, r3, #4
 80039ea:	6008      	str	r0, [r1, #0]
 80039ec:	0628      	lsls	r0, r5, #24
 80039ee:	d501      	bpl.n	80039f4 <_printf_i+0xec>
 80039f0:	681d      	ldr	r5, [r3, #0]
 80039f2:	e002      	b.n	80039fa <_printf_i+0xf2>
 80039f4:	0669      	lsls	r1, r5, #25
 80039f6:	d5fb      	bpl.n	80039f0 <_printf_i+0xe8>
 80039f8:	881d      	ldrh	r5, [r3, #0]
 80039fa:	2f6f      	cmp	r7, #111	; 0x6f
 80039fc:	bf0c      	ite	eq
 80039fe:	2308      	moveq	r3, #8
 8003a00:	230a      	movne	r3, #10
 8003a02:	4852      	ldr	r0, [pc, #328]	; (8003b4c <_printf_i+0x244>)
 8003a04:	2100      	movs	r1, #0
 8003a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a0a:	6866      	ldr	r6, [r4, #4]
 8003a0c:	2e00      	cmp	r6, #0
 8003a0e:	bfa8      	it	ge
 8003a10:	6821      	ldrge	r1, [r4, #0]
 8003a12:	60a6      	str	r6, [r4, #8]
 8003a14:	bfa4      	itt	ge
 8003a16:	f021 0104 	bicge.w	r1, r1, #4
 8003a1a:	6021      	strge	r1, [r4, #0]
 8003a1c:	b90d      	cbnz	r5, 8003a22 <_printf_i+0x11a>
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	d04d      	beq.n	8003abe <_printf_i+0x1b6>
 8003a22:	4616      	mov	r6, r2
 8003a24:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a28:	fb03 5711 	mls	r7, r3, r1, r5
 8003a2c:	5dc7      	ldrb	r7, [r0, r7]
 8003a2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a32:	462f      	mov	r7, r5
 8003a34:	42bb      	cmp	r3, r7
 8003a36:	460d      	mov	r5, r1
 8003a38:	d9f4      	bls.n	8003a24 <_printf_i+0x11c>
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d10b      	bne.n	8003a56 <_printf_i+0x14e>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	07df      	lsls	r7, r3, #31
 8003a42:	d508      	bpl.n	8003a56 <_printf_i+0x14e>
 8003a44:	6923      	ldr	r3, [r4, #16]
 8003a46:	6861      	ldr	r1, [r4, #4]
 8003a48:	4299      	cmp	r1, r3
 8003a4a:	bfde      	ittt	le
 8003a4c:	2330      	movle	r3, #48	; 0x30
 8003a4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a56:	1b92      	subs	r2, r2, r6
 8003a58:	6122      	str	r2, [r4, #16]
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4640      	mov	r0, r8
 8003a60:	f8cd a000 	str.w	sl, [sp]
 8003a64:	aa03      	add	r2, sp, #12
 8003a66:	f7ff fedf 	bl	8003828 <_printf_common>
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d14c      	bne.n	8003b08 <_printf_i+0x200>
 8003a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a72:	b004      	add	sp, #16
 8003a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a78:	4834      	ldr	r0, [pc, #208]	; (8003b4c <_printf_i+0x244>)
 8003a7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a7e:	680e      	ldr	r6, [r1, #0]
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a86:	061f      	lsls	r7, r3, #24
 8003a88:	600e      	str	r6, [r1, #0]
 8003a8a:	d514      	bpl.n	8003ab6 <_printf_i+0x1ae>
 8003a8c:	07d9      	lsls	r1, r3, #31
 8003a8e:	bf44      	itt	mi
 8003a90:	f043 0320 	orrmi.w	r3, r3, #32
 8003a94:	6023      	strmi	r3, [r4, #0]
 8003a96:	b91d      	cbnz	r5, 8003aa0 <_printf_i+0x198>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	f023 0320 	bic.w	r3, r3, #32
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	e7af      	b.n	8003a04 <_printf_i+0xfc>
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	f043 0320 	orr.w	r3, r3, #32
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	2378      	movs	r3, #120	; 0x78
 8003aae:	4828      	ldr	r0, [pc, #160]	; (8003b50 <_printf_i+0x248>)
 8003ab0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ab4:	e7e3      	b.n	8003a7e <_printf_i+0x176>
 8003ab6:	065e      	lsls	r6, r3, #25
 8003ab8:	bf48      	it	mi
 8003aba:	b2ad      	uxthmi	r5, r5
 8003abc:	e7e6      	b.n	8003a8c <_printf_i+0x184>
 8003abe:	4616      	mov	r6, r2
 8003ac0:	e7bb      	b.n	8003a3a <_printf_i+0x132>
 8003ac2:	680b      	ldr	r3, [r1, #0]
 8003ac4:	6826      	ldr	r6, [r4, #0]
 8003ac6:	1d1d      	adds	r5, r3, #4
 8003ac8:	6960      	ldr	r0, [r4, #20]
 8003aca:	600d      	str	r5, [r1, #0]
 8003acc:	0635      	lsls	r5, r6, #24
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	d501      	bpl.n	8003ad6 <_printf_i+0x1ce>
 8003ad2:	6018      	str	r0, [r3, #0]
 8003ad4:	e002      	b.n	8003adc <_printf_i+0x1d4>
 8003ad6:	0671      	lsls	r1, r6, #25
 8003ad8:	d5fb      	bpl.n	8003ad2 <_printf_i+0x1ca>
 8003ada:	8018      	strh	r0, [r3, #0]
 8003adc:	2300      	movs	r3, #0
 8003ade:	4616      	mov	r6, r2
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	e7ba      	b.n	8003a5a <_printf_i+0x152>
 8003ae4:	680b      	ldr	r3, [r1, #0]
 8003ae6:	1d1a      	adds	r2, r3, #4
 8003ae8:	600a      	str	r2, [r1, #0]
 8003aea:	681e      	ldr	r6, [r3, #0]
 8003aec:	2100      	movs	r1, #0
 8003aee:	4630      	mov	r0, r6
 8003af0:	6862      	ldr	r2, [r4, #4]
 8003af2:	f000 f82f 	bl	8003b54 <memchr>
 8003af6:	b108      	cbz	r0, 8003afc <_printf_i+0x1f4>
 8003af8:	1b80      	subs	r0, r0, r6
 8003afa:	6060      	str	r0, [r4, #4]
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	6123      	str	r3, [r4, #16]
 8003b00:	2300      	movs	r3, #0
 8003b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b06:	e7a8      	b.n	8003a5a <_printf_i+0x152>
 8003b08:	4632      	mov	r2, r6
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	6923      	ldr	r3, [r4, #16]
 8003b10:	47d0      	blx	sl
 8003b12:	3001      	adds	r0, #1
 8003b14:	d0ab      	beq.n	8003a6e <_printf_i+0x166>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	079b      	lsls	r3, r3, #30
 8003b1a:	d413      	bmi.n	8003b44 <_printf_i+0x23c>
 8003b1c:	68e0      	ldr	r0, [r4, #12]
 8003b1e:	9b03      	ldr	r3, [sp, #12]
 8003b20:	4298      	cmp	r0, r3
 8003b22:	bfb8      	it	lt
 8003b24:	4618      	movlt	r0, r3
 8003b26:	e7a4      	b.n	8003a72 <_printf_i+0x16a>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	4640      	mov	r0, r8
 8003b30:	47d0      	blx	sl
 8003b32:	3001      	adds	r0, #1
 8003b34:	d09b      	beq.n	8003a6e <_printf_i+0x166>
 8003b36:	3501      	adds	r5, #1
 8003b38:	68e3      	ldr	r3, [r4, #12]
 8003b3a:	9903      	ldr	r1, [sp, #12]
 8003b3c:	1a5b      	subs	r3, r3, r1
 8003b3e:	42ab      	cmp	r3, r5
 8003b40:	dcf2      	bgt.n	8003b28 <_printf_i+0x220>
 8003b42:	e7eb      	b.n	8003b1c <_printf_i+0x214>
 8003b44:	2500      	movs	r5, #0
 8003b46:	f104 0619 	add.w	r6, r4, #25
 8003b4a:	e7f5      	b.n	8003b38 <_printf_i+0x230>
 8003b4c:	08003e0d 	.word	0x08003e0d
 8003b50:	08003e1e 	.word	0x08003e1e

08003b54 <memchr>:
 8003b54:	4603      	mov	r3, r0
 8003b56:	b510      	push	{r4, lr}
 8003b58:	b2c9      	uxtb	r1, r1
 8003b5a:	4402      	add	r2, r0
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	d101      	bne.n	8003b66 <memchr+0x12>
 8003b62:	2000      	movs	r0, #0
 8003b64:	e003      	b.n	8003b6e <memchr+0x1a>
 8003b66:	7804      	ldrb	r4, [r0, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	428c      	cmp	r4, r1
 8003b6c:	d1f6      	bne.n	8003b5c <memchr+0x8>
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <memcpy>:
 8003b70:	440a      	add	r2, r1
 8003b72:	4291      	cmp	r1, r2
 8003b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b78:	d100      	bne.n	8003b7c <memcpy+0xc>
 8003b7a:	4770      	bx	lr
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b82:	4291      	cmp	r1, r2
 8003b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b88:	d1f9      	bne.n	8003b7e <memcpy+0xe>
 8003b8a:	bd10      	pop	{r4, pc}

08003b8c <memmove>:
 8003b8c:	4288      	cmp	r0, r1
 8003b8e:	b510      	push	{r4, lr}
 8003b90:	eb01 0402 	add.w	r4, r1, r2
 8003b94:	d902      	bls.n	8003b9c <memmove+0x10>
 8003b96:	4284      	cmp	r4, r0
 8003b98:	4623      	mov	r3, r4
 8003b9a:	d807      	bhi.n	8003bac <memmove+0x20>
 8003b9c:	1e43      	subs	r3, r0, #1
 8003b9e:	42a1      	cmp	r1, r4
 8003ba0:	d008      	beq.n	8003bb4 <memmove+0x28>
 8003ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003baa:	e7f8      	b.n	8003b9e <memmove+0x12>
 8003bac:	4601      	mov	r1, r0
 8003bae:	4402      	add	r2, r0
 8003bb0:	428a      	cmp	r2, r1
 8003bb2:	d100      	bne.n	8003bb6 <memmove+0x2a>
 8003bb4:	bd10      	pop	{r4, pc}
 8003bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bbe:	e7f7      	b.n	8003bb0 <memmove+0x24>

08003bc0 <_free_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4605      	mov	r5, r0
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d043      	beq.n	8003c50 <_free_r+0x90>
 8003bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bcc:	1f0c      	subs	r4, r1, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bfb8      	it	lt
 8003bd2:	18e4      	addlt	r4, r4, r3
 8003bd4:	f000 f8d0 	bl	8003d78 <__malloc_lock>
 8003bd8:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <_free_r+0x94>)
 8003bda:	6813      	ldr	r3, [r2, #0]
 8003bdc:	4610      	mov	r0, r2
 8003bde:	b933      	cbnz	r3, 8003bee <_free_r+0x2e>
 8003be0:	6063      	str	r3, [r4, #4]
 8003be2:	6014      	str	r4, [r2, #0]
 8003be4:	4628      	mov	r0, r5
 8003be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bea:	f000 b8cb 	b.w	8003d84 <__malloc_unlock>
 8003bee:	42a3      	cmp	r3, r4
 8003bf0:	d90a      	bls.n	8003c08 <_free_r+0x48>
 8003bf2:	6821      	ldr	r1, [r4, #0]
 8003bf4:	1862      	adds	r2, r4, r1
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	bf01      	itttt	eq
 8003bfa:	681a      	ldreq	r2, [r3, #0]
 8003bfc:	685b      	ldreq	r3, [r3, #4]
 8003bfe:	1852      	addeq	r2, r2, r1
 8003c00:	6022      	streq	r2, [r4, #0]
 8003c02:	6063      	str	r3, [r4, #4]
 8003c04:	6004      	str	r4, [r0, #0]
 8003c06:	e7ed      	b.n	8003be4 <_free_r+0x24>
 8003c08:	461a      	mov	r2, r3
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	b10b      	cbz	r3, 8003c12 <_free_r+0x52>
 8003c0e:	42a3      	cmp	r3, r4
 8003c10:	d9fa      	bls.n	8003c08 <_free_r+0x48>
 8003c12:	6811      	ldr	r1, [r2, #0]
 8003c14:	1850      	adds	r0, r2, r1
 8003c16:	42a0      	cmp	r0, r4
 8003c18:	d10b      	bne.n	8003c32 <_free_r+0x72>
 8003c1a:	6820      	ldr	r0, [r4, #0]
 8003c1c:	4401      	add	r1, r0
 8003c1e:	1850      	adds	r0, r2, r1
 8003c20:	4283      	cmp	r3, r0
 8003c22:	6011      	str	r1, [r2, #0]
 8003c24:	d1de      	bne.n	8003be4 <_free_r+0x24>
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4401      	add	r1, r0
 8003c2c:	6011      	str	r1, [r2, #0]
 8003c2e:	6053      	str	r3, [r2, #4]
 8003c30:	e7d8      	b.n	8003be4 <_free_r+0x24>
 8003c32:	d902      	bls.n	8003c3a <_free_r+0x7a>
 8003c34:	230c      	movs	r3, #12
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	e7d4      	b.n	8003be4 <_free_r+0x24>
 8003c3a:	6820      	ldr	r0, [r4, #0]
 8003c3c:	1821      	adds	r1, r4, r0
 8003c3e:	428b      	cmp	r3, r1
 8003c40:	bf01      	itttt	eq
 8003c42:	6819      	ldreq	r1, [r3, #0]
 8003c44:	685b      	ldreq	r3, [r3, #4]
 8003c46:	1809      	addeq	r1, r1, r0
 8003c48:	6021      	streq	r1, [r4, #0]
 8003c4a:	6063      	str	r3, [r4, #4]
 8003c4c:	6054      	str	r4, [r2, #4]
 8003c4e:	e7c9      	b.n	8003be4 <_free_r+0x24>
 8003c50:	bd38      	pop	{r3, r4, r5, pc}
 8003c52:	bf00      	nop
 8003c54:	200000cc 	.word	0x200000cc

08003c58 <_malloc_r>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	1ccd      	adds	r5, r1, #3
 8003c5c:	f025 0503 	bic.w	r5, r5, #3
 8003c60:	3508      	adds	r5, #8
 8003c62:	2d0c      	cmp	r5, #12
 8003c64:	bf38      	it	cc
 8003c66:	250c      	movcc	r5, #12
 8003c68:	2d00      	cmp	r5, #0
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	db01      	blt.n	8003c72 <_malloc_r+0x1a>
 8003c6e:	42a9      	cmp	r1, r5
 8003c70:	d903      	bls.n	8003c7a <_malloc_r+0x22>
 8003c72:	230c      	movs	r3, #12
 8003c74:	6033      	str	r3, [r6, #0]
 8003c76:	2000      	movs	r0, #0
 8003c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c7a:	f000 f87d 	bl	8003d78 <__malloc_lock>
 8003c7e:	4921      	ldr	r1, [pc, #132]	; (8003d04 <_malloc_r+0xac>)
 8003c80:	680a      	ldr	r2, [r1, #0]
 8003c82:	4614      	mov	r4, r2
 8003c84:	b99c      	cbnz	r4, 8003cae <_malloc_r+0x56>
 8003c86:	4f20      	ldr	r7, [pc, #128]	; (8003d08 <_malloc_r+0xb0>)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	b923      	cbnz	r3, 8003c96 <_malloc_r+0x3e>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f000 f862 	bl	8003d58 <_sbrk_r>
 8003c94:	6038      	str	r0, [r7, #0]
 8003c96:	4629      	mov	r1, r5
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f000 f85d 	bl	8003d58 <_sbrk_r>
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	d123      	bne.n	8003cea <_malloc_r+0x92>
 8003ca2:	230c      	movs	r3, #12
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	6033      	str	r3, [r6, #0]
 8003ca8:	f000 f86c 	bl	8003d84 <__malloc_unlock>
 8003cac:	e7e3      	b.n	8003c76 <_malloc_r+0x1e>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	1b5b      	subs	r3, r3, r5
 8003cb2:	d417      	bmi.n	8003ce4 <_malloc_r+0x8c>
 8003cb4:	2b0b      	cmp	r3, #11
 8003cb6:	d903      	bls.n	8003cc0 <_malloc_r+0x68>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	441c      	add	r4, r3
 8003cbc:	6025      	str	r5, [r4, #0]
 8003cbe:	e004      	b.n	8003cca <_malloc_r+0x72>
 8003cc0:	6863      	ldr	r3, [r4, #4]
 8003cc2:	42a2      	cmp	r2, r4
 8003cc4:	bf0c      	ite	eq
 8003cc6:	600b      	streq	r3, [r1, #0]
 8003cc8:	6053      	strne	r3, [r2, #4]
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f000 f85a 	bl	8003d84 <__malloc_unlock>
 8003cd0:	f104 000b 	add.w	r0, r4, #11
 8003cd4:	1d23      	adds	r3, r4, #4
 8003cd6:	f020 0007 	bic.w	r0, r0, #7
 8003cda:	1ac2      	subs	r2, r0, r3
 8003cdc:	d0cc      	beq.n	8003c78 <_malloc_r+0x20>
 8003cde:	1a1b      	subs	r3, r3, r0
 8003ce0:	50a3      	str	r3, [r4, r2]
 8003ce2:	e7c9      	b.n	8003c78 <_malloc_r+0x20>
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	6864      	ldr	r4, [r4, #4]
 8003ce8:	e7cc      	b.n	8003c84 <_malloc_r+0x2c>
 8003cea:	1cc4      	adds	r4, r0, #3
 8003cec:	f024 0403 	bic.w	r4, r4, #3
 8003cf0:	42a0      	cmp	r0, r4
 8003cf2:	d0e3      	beq.n	8003cbc <_malloc_r+0x64>
 8003cf4:	1a21      	subs	r1, r4, r0
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f000 f82e 	bl	8003d58 <_sbrk_r>
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	d1dd      	bne.n	8003cbc <_malloc_r+0x64>
 8003d00:	e7cf      	b.n	8003ca2 <_malloc_r+0x4a>
 8003d02:	bf00      	nop
 8003d04:	200000cc 	.word	0x200000cc
 8003d08:	200000d0 	.word	0x200000d0

08003d0c <_realloc_r>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	4607      	mov	r7, r0
 8003d10:	4614      	mov	r4, r2
 8003d12:	460e      	mov	r6, r1
 8003d14:	b921      	cbnz	r1, 8003d20 <_realloc_r+0x14>
 8003d16:	4611      	mov	r1, r2
 8003d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d1c:	f7ff bf9c 	b.w	8003c58 <_malloc_r>
 8003d20:	b922      	cbnz	r2, 8003d2c <_realloc_r+0x20>
 8003d22:	f7ff ff4d 	bl	8003bc0 <_free_r>
 8003d26:	4625      	mov	r5, r4
 8003d28:	4628      	mov	r0, r5
 8003d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d2c:	f000 f830 	bl	8003d90 <_malloc_usable_size_r>
 8003d30:	42a0      	cmp	r0, r4
 8003d32:	d20f      	bcs.n	8003d54 <_realloc_r+0x48>
 8003d34:	4621      	mov	r1, r4
 8003d36:	4638      	mov	r0, r7
 8003d38:	f7ff ff8e 	bl	8003c58 <_malloc_r>
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	2800      	cmp	r0, #0
 8003d40:	d0f2      	beq.n	8003d28 <_realloc_r+0x1c>
 8003d42:	4631      	mov	r1, r6
 8003d44:	4622      	mov	r2, r4
 8003d46:	f7ff ff13 	bl	8003b70 <memcpy>
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	f7ff ff37 	bl	8003bc0 <_free_r>
 8003d52:	e7e9      	b.n	8003d28 <_realloc_r+0x1c>
 8003d54:	4635      	mov	r5, r6
 8003d56:	e7e7      	b.n	8003d28 <_realloc_r+0x1c>

08003d58 <_sbrk_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	4d05      	ldr	r5, [pc, #20]	; (8003d74 <_sbrk_r+0x1c>)
 8003d5e:	4604      	mov	r4, r0
 8003d60:	4608      	mov	r0, r1
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	f7fc fde2 	bl	800092c <_sbrk>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	d102      	bne.n	8003d72 <_sbrk_r+0x1a>
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	b103      	cbz	r3, 8003d72 <_sbrk_r+0x1a>
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	bd38      	pop	{r3, r4, r5, pc}
 8003d74:	200001c0 	.word	0x200001c0

08003d78 <__malloc_lock>:
 8003d78:	4801      	ldr	r0, [pc, #4]	; (8003d80 <__malloc_lock+0x8>)
 8003d7a:	f000 b811 	b.w	8003da0 <__retarget_lock_acquire_recursive>
 8003d7e:	bf00      	nop
 8003d80:	200001c8 	.word	0x200001c8

08003d84 <__malloc_unlock>:
 8003d84:	4801      	ldr	r0, [pc, #4]	; (8003d8c <__malloc_unlock+0x8>)
 8003d86:	f000 b80c 	b.w	8003da2 <__retarget_lock_release_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	200001c8 	.word	0x200001c8

08003d90 <_malloc_usable_size_r>:
 8003d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d94:	1f18      	subs	r0, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bfbc      	itt	lt
 8003d9a:	580b      	ldrlt	r3, [r1, r0]
 8003d9c:	18c0      	addlt	r0, r0, r3
 8003d9e:	4770      	bx	lr

08003da0 <__retarget_lock_acquire_recursive>:
 8003da0:	4770      	bx	lr

08003da2 <__retarget_lock_release_recursive>:
 8003da2:	4770      	bx	lr

08003da4 <_init>:
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	bf00      	nop
 8003da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003daa:	bc08      	pop	{r3}
 8003dac:	469e      	mov	lr, r3
 8003dae:	4770      	bx	lr

08003db0 <_fini>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr
