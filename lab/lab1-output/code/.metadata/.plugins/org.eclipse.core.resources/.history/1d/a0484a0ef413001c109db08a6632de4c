/**
  ******************************************************************************
  * @file           : led_7seg.c
  * @brief          :
  *                   This file contains the buffer-driver define for controlling 1D 7-seg LEDs.
  *
  *                   Created on:	Sep 12th, 2021
  *                   Author:		Thien Long
  ******************************************************************************
  * @attention
  *
  ******************************************************************************
  */

#include "main.h"
#include "led_7seg.h"

static uint8_t led7SegBuffer[NUMBER_OF_LEDS_7SEG][NUMBER_OF_VALUES_7SEG / 4];
static uint8_t led7SegArrayPins[NUMBER_OF_SEGS] = {
		GPIO_PIN_0,
		GPIO_PIN_1,
		GPIO_PIN_2,
		GPIO_PIN_3,
		GPIO_PIN_4,
		GPIO_PIN_5,
		GPIO_PIN_6
};

uint8_t led7SegBuffer_Write(uint8_t ledPos, uint8_t value) {
	if (ledPos >= NUMBER_OF_LEDS_7SEG) {
		return 0;
	}

	if (value >= NUMBER_OF_VALUES_7SEG) {
		return 0;
	}

	for

	return 1;
}

void led7SegDriver_Drive(uint8_t ledPos) {
	uint8_t segValue = led7SegValueConversion[led7SegBuffer[ledPos]];
	for (uint8_t segPos = 0; segPos < NUMBER_OF_SEGS; segPos++) {
		if (segValue & (0x01 << segPos)) {
			HAL_GPIO_WritePin(GPIO_PORT_7SEG, led7SegArrayPins[segPos], GPIO_PIN_RESET);
		}

		else {
			HAL_GPIO_WritePin(GPIO_PORT_7SEG, led7SegArrayPins[segPos], GPIO_PIN_SET);
		}
	}
}

void display7SEG(uint8_t ledPos, int num)
{
	if(!led7SegBuffer_Write(ledPos, (uint8_t)num)) {
		return;
	}

	led7SegDriver_Drive(ledPos);
}
