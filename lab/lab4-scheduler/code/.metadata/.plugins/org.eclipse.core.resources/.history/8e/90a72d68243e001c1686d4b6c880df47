/**
  ******************************************************************************
  * @file           : scheduler.c
  * @brief          : Co-operative scheduler implementation
  ******************************************************************************
  *                   Created on:	Nov 5th, 2021
  *                   Author:		Thien Long
  ******************************************************************************
  */

#include "scheduler.h"

sTask SCH_tasks_G [SCH_MAX_TASKS];

void SCH_Init(void) {
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
		SCH_Delete_Task (i);
	}
	// Reset the global error variable
	// − SCH_Delete_Task() will generate an error code,
	// (because the task array is empty)
	Error_code_G = 0;
	Timer_init () ;
	Watchdog_init() ;
}

void SCH_Update(void) {
	unsigned char Index ;
	// NOTE: c alcul a tions are in *TICKS*
( not milliseconds )
fo r ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
// Check i f there i s a task a t t hi s loca tion
i f ( SCH_tasks_G [ Index ] . pTask ) {
i f ( SCH_tasks_G [ Index ] . Delay == 0 ) {
// The task i s due to run
// Inc . the ’RunMe’ fl a g
SCH_tasks_G [ Index ] .RunMe += 1;
i f ( SCH_tasks_G [ Index ] . Period ) {
// Schedule periodic tasks to run again
SCH_tasks_G [ Index ] . Delay = SCH_tasks_G [ Index ] . Period ;
}
} el s e {
// Not ye t ready to run : j u s t decrement the delay
SCH_tasks_G [ Index ] . Delay −= 1;
}
}
}
}


